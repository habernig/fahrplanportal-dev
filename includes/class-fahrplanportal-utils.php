<?php
/**
 * FahrplanPortal Utils Class
 * Helper-Funktionen, Formatierungen und Konvertierungen
 * 
 * ‚úÖ AKTUALISIERT: Flexibles Mapping-System f√ºr alle Formate
 * ‚úÖ NEU: Intelligentes Route-Splitting f√ºr deutsche Ortsnamen
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

class FahrplanPortal_Utils {
    
    /**
     * ‚úÖ NEU: Intelligentes Route-Splitting f√ºr deutsche Ortsnamen
     * Erkennt zusammengeh√∂rige Ortsnamen-Muster und splittet korrekt
     * 
     * @param string $route Die zu splittende Route (z.B. "st-michael-ob-der-gurk-tainach-voelkermarkt")
     * @return array Array mit korrekt gesplitteten Ortsteilen
     */
    public function smart_split_route($route) {
            error_log("FAHRPLANPORTAL: ============= SMART ROUTE SPLITTING =============");
            error_log("FAHRPLANPORTAL: Input Route: '$route'");
            
            $result = array();
            $route_lower = strtolower($route);
            
            // WICHTIG: Patterns nach L√ÑNGE sortiert (l√§ngste zuerst!)
            $compound_patterns = array(
                // L√ÑNGSTE Muster zuerst (5 Teile)
                'st-michael-ob-der-gurk' => '¬ßST_MICHAEL_OB_DER_GURK¬ß',
                'feistritz-an-der-drau' => '¬ßFEISTRITZ_AN_DER_DRAU¬ß',
                'feistritz-an-der-gail' => '¬ßFEISTRITZ_AN_DER_GAIL¬ß',
                'st-veit-an-der-glan' => '¬ßST_VEIT_AN_DER_GLAN¬ß',
                'spittal-an-der-drau' => '¬ßSPITTAL_AN_DER_DRAU¬ß',
                
                // 4-teilige Muster
                'st-georgen-ob-bleiburg' => '¬ßST_GEORGEN_OB_BLEIBURG¬ß',
                'st-michael-ob-bleiburg' => '¬ßST_MICHAEL_OB_BLEIBURG¬ß',
                'st-georgen-ob-murau' => '¬ßST_GEORGEN_OB_MURAU¬ß',
                'st-paul-im-lavanttal' => '¬ßST_PAUL_IM_LAVANTTAL¬ß',
                
                // 3-teilige Muster  
                'lind-ob-velden' => '¬ßLIND_OB_VELDEN¬ß',
                'stein-im-jauntal' => '¬ßSTEIN_IM_JAUNTAL¬ß',
                'an-der-glan' => '¬ßAN_DER_GLAN¬ß',
                'an-der-drau' => '¬ßAN_DER_DRAU¬ß',
                'ob-der-gurk' => '¬ßOB_DER_GURK¬ß',
                'im-jauntal' => '¬ßIM_JAUNTAL¬ß',
                
                // 2-teilige Muster (M√úSSEN NACH den l√§ngeren kommen!)
                'maria-saal' => '¬ßMARIA_SAAL¬ß',
                'st-michael' => '¬ßST_MICHAEL¬ß',
                'st-veit' => '¬ßST_VEIT¬ß',
                'st-georgen' => '¬ßST_GEORGEN¬ß',
                'st-kanzian' => '¬ßST_KANZIAN¬ß',
                'st-donat' => '¬ßST_DONAT¬ß',
                'st-paul' => '¬ßST_PAUL¬ß',
                'st-andr√§' => '¬ßST_ANDRA¬ß',
                'st-jakob' => '¬ßST_JAKOB¬ß',
                'st-stefan' => '¬ßST_STEFAN¬ß',
                'st-marein' => '¬ßST_MAREIN¬ß',
            );
            
            // Schritt 1: Ersetze Muster SEQUENZIELL (nicht alle auf einmal!)
            $processed_route = $route_lower;
            $replacements = array();
            
            foreach ($compound_patterns as $pattern => $placeholder) {
                if (strpos($processed_route, $pattern) !== false) {
                    // Speichere was ersetzt wurde
                    $replacements[$placeholder] = $pattern;
                    // Ersetze NUR EINMAL pro Durchlauf
                    $processed_route = str_replace($pattern, $placeholder, $processed_route);
                    error_log("FAHRPLANPORTAL: Muster ersetzt: '$pattern' ‚Üí '$placeholder'");
                    error_log("FAHRPLANPORTAL: Zwischenstand: '$processed_route'");
                }
            }
            
            error_log("FAHRPLANPORTAL: Nach Muster-Ersetzung: '$processed_route'");
            
            // Schritt 2: Splitte am Bindestrich
            $parts = explode('-', $processed_route);
            
            // üîç DEBUG: Was kommt aus explode() raus?
            error_log("FAHRPLANPORTAL: DEBUG - Parts nach explode(): [" . implode(', ', $parts) . "]");
            error_log("FAHRPLANPORTAL: DEBUG - Replacements Array:");
            foreach ($replacements as $placeholder => $original) {
                error_log("FAHRPLANPORTAL: DEBUG - '$placeholder' => '$original'");
            }
            
            // Schritt 3: Verarbeite jeden Teil
            foreach ($parts as $part) {
                $part = trim($part);
                
                if (empty($part)) {
                    continue;
                }
                
                error_log("FAHRPLANPORTAL: DEBUG - Pr√ºfe Teil: '$part'");
                
                // Pr√ºfe ob es ein Platzhalter ist
                if (strpos($part, '¬ß') !== false && isset($replacements[$part])) {
                    error_log("FAHRPLANPORTAL: DEBUG - Platzhalter erkannt und gefunden in replacements!");
                    $original = $replacements[$part];
                    
                    // Zerlege den Original-String in seine Bestandteile
                    $sub_parts = explode('-', $original);
                    foreach ($sub_parts as $sub) {
                        if (!empty($sub)) {
                            $result[] = $sub;
                        }
                    }
                } else {
                    error_log("FAHRPLANPORTAL: DEBUG - Kein Platzhalter oder nicht in replacements gefunden");
                    // Normaler Teil ohne Platzhalter
                    $result[] = $part;
                }
            }
            
            error_log("FAHRPLANPORTAL: Smart Split Ergebnis: [" . implode(', ', $result) . "]");
            error_log("FAHRPLANPORTAL: ===========================================");
            
            return $result;
        }
    
    /**
     * ‚úÖ NEU: Exklusionsliste aus WordPress Options laden (erweitert f√ºr Tag-Analyse)
     * ‚úÖ √úBERSCHREIBT: Die bestehende get_exclusion_words() Funktion f√ºr bessere Performance
     */
    public function get_exclusion_words() {
        $exclusion_text = get_option('fahrplanportal_exclusion_words', '');
        
        if (empty($exclusion_text)) {
            return array();
        }
        
        // W√∂rter k√∂nnen durch Leerzeichen, Kommas, Tabs oder Zeilenumbr√ºche getrennt sein
        $exclusion_words_array = preg_split('/[\s,\t\n\r]+/', $exclusion_text, -1, PREG_SPLIT_NO_EMPTY);
        $exclusion_words_array = array_map('trim', $exclusion_words_array);
        $exclusion_words_array = array_map('mb_strtolower', $exclusion_words_array);
        
        // Performance-Optimierung: array_flip f√ºr O(1) Lookups
        return array_flip($exclusion_words_array);
    }
    
    /**
     * ‚úÖ KOMPLETT NEU: Flexibles Linien-Mapping f√ºr alle Formate
     * 
     * Unterst√ºtzt jetzt:
     * - Reine Zahlen: 100:5108
     * - Buchstaben-Zahlen: X1:SB3 (5912)
     * - Text mit Leerzeichen: 1:Lin 1
     * - Zahlen mit Suffix: 122:8101 GV
     * - Mehrere Zahlen: 180:5140/5144
     * - Spezialwerte: 106:keine
     * - Komplexe Formate: X4:SB4 (8574/8575)
     */
    public function get_line_mapping() {
        $mapping_text = get_option('fahrplanportal_line_mapping', '');
        
        if (empty($mapping_text)) {
            error_log("FAHRPLANPORTAL: Mapping-Text ist leer");
            return array();
        }
        
        $mapping_array = array();
        $lines = preg_split('/[\n\r]+/', $mapping_text, -1, PREG_SPLIT_NO_EMPTY);
        
        error_log("FAHRPLANPORTAL: Verarbeite " . count($lines) . " Mapping-Zeilen");
        
        foreach ($lines as $line_num => $line) {
            $line = trim($line);
            
            // √úberspringe leere Zeilen und Kommentare
            if (empty($line) || strpos($line, '//') === 0 || strpos($line, '#') === 0) {
                continue;
            }
            
            // ‚úÖ NEUES FLEXIBLES PATTERN: Akzeptiert ALLES vor und nach dem Doppelpunkt
            // Bedingung: Es muss genau EIN Doppelpunkt vorhanden sein
            $colon_count = substr_count($line, ':');
            
            if ($colon_count !== 1) {
                error_log("FAHRPLANPORTAL: ‚ö†Ô∏è Zeile $line_num hat $colon_count Doppelpunkte (erwartet: 1): '$line'");
                continue;
            }
            
            // Teile am Doppelpunkt
            $parts = explode(':', $line, 2);
            
            if (count($parts) === 2) {
                $linie_neu = trim($parts[0]);
                $linie_alt = trim($parts[1]);
                
                // Validierung: Beide Teile m√ºssen nicht-leer sein
                if (empty($linie_neu) || empty($linie_alt)) {
                    error_log("FAHRPLANPORTAL: ‚ö†Ô∏è Zeile $line_num hat leere Teile: neu='$linie_neu', alt='$linie_alt'");
                    continue;
                }
                
                // Normalisierung f√ºr besseres Matching
                $linie_neu_normalized = $this->normalize_line_key($linie_neu);
                
                // Haupteintrag mit normalisiertem Key
                $mapping_array[$linie_neu_normalized] = $linie_alt;
                
                // Zus√§tzlich Original-Key speichern falls unterschiedlich
                if ($linie_neu_normalized !== $linie_neu) {
                    $mapping_array[$linie_neu] = $linie_alt;
                }
                
                // F√ºr Buchstaben-Zahlen-Kombinationen auch lowercase Version
                if (preg_match('/^[A-Z]\d+$/i', $linie_neu)) {
                    $linie_neu_lower = strtolower($linie_neu);
                    $mapping_array[$linie_neu_lower] = $linie_alt;
                }
                
                error_log("FAHRPLANPORTAL: ‚úÖ Mapping geladen (Zeile " . ($line_num + 1) . "): '$linie_neu' ‚Üí '$linie_alt'");
                
            } else {
                error_log("FAHRPLANPORTAL: ‚ö†Ô∏è Zeile $line_num konnte nicht geparst werden: '$line'");
            }
        }
        
        error_log("FAHRPLANPORTAL: ‚úÖ " . count($mapping_array) . " Mapping-Eintr√§ge erfolgreich geladen");
        
        // Debug: Spezielle Eintr√§ge anzeigen
        $special_entries = array();
        foreach ($mapping_array as $neu => $alt) {
            if (strpos($alt, 'keine') !== false || 
                strpos($alt, '/') !== false || 
                strpos($alt, '(') !== false ||
                strpos($alt, ' ') !== false) {
                $special_entries[] = "$neu ‚Üí $alt";
            }
        }
        
        if (!empty($special_entries)) {
            error_log("FAHRPLANPORTAL: üìã Spezielle Mapping-Eintr√§ge:");
            foreach (array_slice($special_entries, 0, 10) as $entry) {
                error_log("FAHRPLANPORTAL:    $entry");
            }
        }
        
        return $mapping_array;
    }
    
    /**
     * ‚úÖ NEU: Helper-Funktion f√ºr Key-Normalisierung
     * 
     * @param string $key Der zu normalisierende Schl√ºssel
     * @return string Der normalisierte Schl√ºssel
     */
    private function normalize_line_key($key) {
        // Entferne f√ºhrende/nachfolgende Leerzeichen
        $key = trim($key);
        
        // F√ºr Buchstaben-Zahlen-Kombinationen: Gro√übuchstaben
        if (preg_match('/^[A-Z]\d+$/i', $key)) {
            return strtoupper($key);
        }
        
        // Numerische Keys bleiben unver√§ndert
        if (is_numeric($key)) {
            return $key;
        }
        
        // Alle anderen bleiben wie sie sind
        return $key;
    }
    
    /**
     * ‚úÖ ERWEITERT: Intelligentes Mapping-Lookup mit Fallbacks
     * 
     * @param string $key Der zu suchende Schl√ºssel
     * @param array $mapping_array Das Mapping-Array
     * @return string|null Der gemappte Wert oder null
     */
    public function lookup_mapping($key, $mapping_array) {
        // 1. Direkte Suche
        if (isset($mapping_array[$key])) {
            error_log("FAHRPLANPORTAL: Mapping gefunden (direkt): '$key' ‚Üí '" . $mapping_array[$key] . "'");
            return $mapping_array[$key];
        }
        
        // 2. Normalisierte Suche
        $normalized_key = $this->normalize_line_key($key);
        if ($normalized_key !== $key && isset($mapping_array[$normalized_key])) {
            error_log("FAHRPLANPORTAL: Mapping gefunden (normalisiert): '$key' ‚Üí '" . $mapping_array[$normalized_key] . "'");
            return $mapping_array[$normalized_key];
        }
        
        // 3. Case-insensitive Suche
        $key_upper = strtoupper($key);
        if (isset($mapping_array[$key_upper])) {
            error_log("FAHRPLANPORTAL: Mapping gefunden (uppercase): '$key' ‚Üí '" . $mapping_array[$key_upper] . "'");
            return $mapping_array[$key_upper];
        }
        
        $key_lower = strtolower($key);
        if (isset($mapping_array[$key_lower])) {
            error_log("FAHRPLANPORTAL: Mapping gefunden (lowercase): '$key' ‚Üí '" . $mapping_array[$key_lower] . "'");
            return $mapping_array[$key_lower];
        }
        
        // 4. Vollst√§ndige Case-insensitive Iteration (letzter Versuch)
        foreach ($mapping_array as $map_key => $map_value) {
            if (strcasecmp($map_key, $key) === 0) {
                error_log("FAHRPLANPORTAL: Mapping gefunden (case-insensitive): '$key' ‚Üí '$map_value'");
                return $map_value;
            }
        }
        
        // Kein Mapping gefunden
        error_log("FAHRPLANPORTAL: ‚ùå Kein Mapping gefunden f√ºr: '$key'");
        return null;
    }
    
    /**
     * ‚úÖ KORRIGIERT: Regionsnamen formatieren (Stadt- und Vororteverkehr + normale Regionen)
     */
    public function format_region_name($region_raw) {
        // Leer? Dann unver√§ndert zur√ºck
        if (empty($region_raw)) {
            return $region_raw;
        }
        
        // Schon formatiert (hat Gro√übuchstaben)? Dann unver√§ndert
        if (preg_match('/[A-Z√Ñ√ñ√ú]/', $region_raw)) {
            return $region_raw;
        }
        
        error_log("FAHRPLANPORTAL: Format Region Raw Input: '$region_raw'");
        
        // ‚úÖ NEU: Spezielle Behandlung f√ºr Stadt- und Vororteverkehr
        if (preg_match('/^([a-z])-stadt-und-vororteverkehr-(.+)$/', $region_raw, $matches)) {
            $buchstabe = strtoupper($matches[1]);  // b ‚Üí B, c ‚Üí C, etc.
            $stadt_name = $matches[2];             // villach, spittal-a-d-drau, etc.
            
            error_log("FAHRPLANPORTAL: Stadt- und Vororteverkehr erkannt - Buchstabe: '$buchstabe', Stadt: '$stadt_name'");
            
            // ‚úÖ Stadt-Name formatieren (mit Abk√ºrzungen und Umlauten)
            $formatted_city = $this->format_city_name_with_abbreviations($stadt_name);
            
            $result = $buchstabe . ' Stadt- u. Vororteverkehr ' . $formatted_city;
            
            error_log("FAHRPLANPORTAL: Stadt- und Vororteverkehr formatiert: '$region_raw' ‚Üí '$result'");
            return $result;
        }
        
        // ‚úÖ NEU: Spezielle Behandlung f√ºr Nummern-Regionen (01-moelltal, 02-liesertal, etc.)
        if (preg_match('/^(\d{2})-(.+)$/', $region_raw, $matches)) {
            $nummer = $matches[1];           // 01, 02, etc.
            $region_name = $matches[2];      // moelltal, liesertal, etc.
            
            error_log("FAHRPLANPORTAL: Nummern-Region erkannt - Nummer: '$nummer', Name: '$region_name'");
            
            // ‚úÖ Region-Name formatieren (mit Abk√ºrzungen und Umlauten)
            $formatted_region = $this->format_city_name_with_abbreviations($region_name);
            
            $result = $nummer . ' ' . $formatted_region;
            
            error_log("FAHRPLANPORTAL: Nummern-Region formatiert: '$region_raw' ‚Üí '$result'");
            return $result;
        }
        
        // ‚úÖ FALLBACK: Normale Region-Formatierung (wie bisher)
        return $this->format_normal_region_name($region_raw);
    }

    /**
     * ‚úÖ NEU: Stadt-Namen mit Abk√ºrzungen formatieren (f√ºr Stadt- und Vororteverkehr)
     */
    private function format_city_name_with_abbreviations($city_name_raw) {
        // ‚úÖ Spezielle Stadt-Abk√ºrzungen behandeln
        $special_cities = array(
            'spittal-a-d-drau' => 'Spittal an der Drau',
            'villach-a-d-drau' => 'Villach an der Drau',
            'klagenfurt-a-w-see' => 'Klagenfurt am W√∂rthersee',
            'st-veit-a-d-glan' => 'St.Veit an der Glan',
            'wolfsberg-a-d-lavant' => 'Wolfsberg an der Lavant',
            'feldkirchen-a-d-drau' => 'Feldkirchen an der Drau',
            'st-georgen-ob-bleiburg' => 'St.Georgen ob Bleiburg',
            'st-michael-ob-bleiburg' => 'St.Michael ob Bleiburg'
        );
        
        // ‚úÖ Direkte Zuordnung pr√ºfen
        if (isset($special_cities[$city_name_raw])) {
            $result = $special_cities[$city_name_raw];
            error_log("FAHRPLANPORTAL: Spezielle Stadt-Zuordnung: '$city_name_raw' ‚Üí '$result'");
            return $result;
        }
        
        // ‚úÖ Normale Formatierung f√ºr andere St√§dte
        $city_parts = explode('-', $city_name_raw);
        
        // ‚úÖ Array-basierte Abk√ºrzungs-Verarbeitung
        $city_parts = $this->process_abbreviations($city_parts);
        
        // ‚úÖ Umlaute konvertieren
        $formatted_parts = array();
        foreach ($city_parts as $part) {
            $part_with_umlauts = $this->convert_german_umlauts($part);
            
            // ‚úÖ Falls noch nicht formatiert: Ersten Buchstaben gro√ü
            if (!preg_match('/^(St\.|an der |ob der |am |bei |unter )/', $part_with_umlauts)) {
                $part_with_umlauts = $this->ucfirst_german($part_with_umlauts);
            }
            
            $formatted_parts[] = $part_with_umlauts;
        }
        
        $result = implode(' ', $formatted_parts);
        error_log("FAHRPLANPORTAL: Stadt-Name formatiert: '$city_name_raw' ‚Üí '$result'");
        
        return $result;
    }

    /**
     * ‚úÖ NEU: Normale Region-Formatierung (bisherige Logik)
     */
    private function format_normal_region_name($region_raw) {
        // ‚úÖ Deutsche Umlaute konvertieren
        $region_with_umlauts = $this->convert_german_umlauts_in_region($region_raw);
        
        // Bindestriche durch Leerzeichen ersetzen
        $region_spaced = str_replace('-', ' ', $region_with_umlauts);
        
        // In Kleinbuchstaben und dann in W√∂rter aufteilen
        $words = explode(' ', strtolower(trim($region_spaced)));
        
        // W√∂rter die klein bleiben sollen
        $lowercase_words = array('an', 'der', 'am', 'von', 'im', 'auf', 'bei', 'zu', 'zur', 'ob');
        
        $formatted_words = array();
        
        foreach ($words as $index => $word) {
            $word = trim($word);
            
            if (empty($word)) {
                continue; // Leere W√∂rter √ºberspringen
            }
            
            // Erstes Wort oder nicht in Ausnahmeliste: gro√ü schreiben
            if ($index === 0 || !in_array($word, $lowercase_words)) {
                $formatted_words[] = $this->ucfirst_german($word);
            } else {
                // Ausnahmewort: klein lassen
                $formatted_words[] = $word;
            }
        }
        
        $result = implode(' ', $formatted_words);
        
        error_log("FAHRPLANPORTAL: Normale Region formatiert: '$region_raw' ‚Üí '$result'");
        
        return $result;
    }
    
    /**
     * ‚úÖ VEREINFACHT: Deutsche Umlaute f√ºr Regionsnamen konvertieren
     */
    private function convert_german_umlauts_in_region($text) {
        return $this->convert_german_umlauts($text);
    }
    
    /**
     * ‚úÖ NEU: Deutsche Gro√ü-/Kleinschreibung mit Umlauten
     */
    public function ucfirst_german($word) {
        // Deutsche Umlaute und Sonderzeichen ber√ºcksichtigen
        $word = trim($word);
        
        if (empty($word)) {
            return $word;
        }
        
        // Ersten Buchstaben gro√ü, Rest klein
        return mb_strtoupper(mb_substr($word, 0, 1, 'UTF-8'), 'UTF-8') . 
               mb_strtolower(mb_substr($word, 1, null, 'UTF-8'), 'UTF-8');
    }
    
    /**
     * ‚úÖ ERWEITERT: Deutsche Umlaute konvertieren - S√úDK√ÑRNTEN FIX
     */
    public function convert_german_umlauts($text) {
        // Bestehende Ausnahmeliste...
        $exceptions = array(
            'auen', 'auenwald', 'auental', 'auendorf', 'auenbach',
            'michael', 'michaelerberg', 'michaelsberg', 'michaelbeuern', 'steuerberg',
        );
        
        $original_text = $text;
        $text_lower = mb_strtolower($text, 'UTF-8');
        
        // Ausnahmen-Pr√ºfung
        if (in_array($text_lower, $exceptions)) {
            error_log("FAHRPLANPORTAL: Titel-Ausnahme gefunden f√ºr '$original_text' - keine Umlaut-Konvertierung");
            return $text;
        }
        
        // Spezielle Michael-Pr√ºfung
        if (stripos($text_lower, 'michael') !== false) {
            error_log("FAHRPLANPORTAL: 'Michael' in Text '$original_text' erkannt - keine Konvertierung");
            return $text;
        }
        
        // ‚úÖ GEZIELTE √ñSTERREICHISCHE KONVERTIERUNGEN - S√úDK√ÑRNTEN HINZUGEF√úGT
        $priority_conversions = array(
            'woerthersee' => 'w√∂rthersee',
            'woerth' => 'w√∂rth', 
            'moell' => 'm√∂ll',
            'oesterreich' => '√∂sterreich',
            'kaernten' => 'k√§rnten',
            'voelkermarkt' => 'v√∂lkermarkt',
            'goeriach' => 'g√∂riach',
            'pusarnitz' => 'pusarnitz',
            
            // ‚úÖ NEU: S√úDK√ÑRNTEN FIX
            'suedkaernten' => 's√ºdk√§rnten',
            'suedk√§rnten' => 's√ºdk√§rnten',
            'suedoesterreich' => 's√ºd√∂sterreich',
            'suedtirol' => 's√ºdtirol',
            'westkaernten' => 'westk√§rnten',
            'ostkaernten' => 'ostk√§rnten',
            'nordkaernten' => 'nordk√§rnten',
            
            // Bestehende Br√ºcken-Konvertierungen...
            'bruecke' => 'br√ºcke',
            'bruecken' => 'br√ºcken',
            'moellbruecke' => 'm√∂llbr√ºcke',
            
            // Bestehende weitere Konvertierungen...
            'muehle' => 'm√ºhle',
            'muehlen' => 'm√ºhlen',
            'gruenberg' => 'gr√ºnberg',
            'gruendorf' => 'gr√ºndorf',
        );
        
        // Priorit√§ts-Konvertierungen durchf√ºhren (CASE-INSENSITIVE)
        foreach ($priority_conversions as $search => $replace) {
            $text = str_ireplace($search, $replace, $text);
        }
        
        // √úberpr√ºfung ob sich etwas ge√§ndert hat
        if ($text !== $original_text) {
            error_log("FAHRPLANPORTAL: Priorit√§ts-Konvertierung durchgef√ºhrt: '$original_text' ‚Üí '$text'");
            return $text;
        }
        
        // Standard Umlaut-Konvertierung (wie bisher)
        $conversions = array(
            'ae' => '√§', 'Ae' => '√Ñ', 'AE' => '√Ñ',
            'oe' => '√∂', 'Oe' => '√ñ', 'OE' => '√ñ',
            'ue' => '√º', 'Ue' => '√ú', 'UE' => '√ú'
        );
        
        $converted_text = $text;
        foreach ($conversions as $search => $replace) {
            $test_conversion = str_replace($search, $replace, $converted_text);
            $test_lower = mb_strtolower($test_conversion, 'UTF-8');
            
            if (in_array($test_lower, $exceptions)) {
                error_log("FAHRPLANPORTAL: Konvertierung '$search' ‚Üí '$replace' √ºbersprungen f√ºr '$converted_text' (w√ºrde Ausnahme '$test_lower' erzeugen)");
                continue;
            }
            
            $converted_text = str_replace($search, $replace, $converted_text);
        }
        
        if ($converted_text !== $text) {
            error_log("FAHRPLANPORTAL: Standard Umlaut-Konvertierung durchgef√ºhrt: '$original_text' ‚Üí '$converted_text'");
        }
        
        return $converted_text;
    }
    
    /**
     * ‚úÖ KOMPLETT UMSTRUKTURIERT: process_abbreviations mit absoluter Priorit√§t f√ºr "ob/bei" Muster
     * ‚úÖ KRITISCHER FIX: "[Ort] ob [Ort]" und "[Ort] bei [Ort]" haben ABSOLUTE PRIORIT√ÑT
     */
    public function process_abbreviations($orte_array) {
        $processed_orte = array();
        $i = 0;
        
        error_log("FAHRPLANPORTAL: Abk√ºrzungs-Verarbeitung Start: " . implode(', ', $orte_array));
        
        while ($i < count($orte_array)) {
            $current = strtolower(trim($orte_array[$i]));
            
            // =================================================================
            // ABSOLUTE PRIORIT√ÑT: "ob" und "bei" Muster M√úSSEN ZUERST KOMMEN!
            // =================================================================
            
            // ‚úÖ H√ñCHSTE PRIORIT√ÑT: "[Ort] ob [Ort]" (z.B. lind, ob, velden)
            if (isset($orte_array[$i + 1]) && strtolower(trim($orte_array[$i + 1])) === 'ob' &&
                isset($orte_array[$i + 2])) {
                
                $ort1 = $this->ucfirst_german($current);
                $ort2 = $this->ucfirst_german(trim($orte_array[$i + 2]));
                $processed_orte[] = $ort1 . ' ob ' . $ort2;
                $i += 3;
                error_log("FAHRPLANPORTAL: ABSOLUTE PRIORIT√ÑT - $ort1 ob $ort2 als Einheit erkannt");
                continue;
            }
            
            // ‚úÖ H√ñCHSTE PRIORIT√ÑT: "[Ort] bei [Ort]" (z.B. edling, bei, mittlern)
            if (isset($orte_array[$i + 1]) && strtolower(trim($orte_array[$i + 1])) === 'bei' &&
                isset($orte_array[$i + 2])) {
                
                $ort1 = $this->ucfirst_german($current);
                $ort2 = $this->ucfirst_german(trim($orte_array[$i + 2]));
                $processed_orte[] = $ort1 . ' bei ' . $ort2;
                $i += 3;
                error_log("FAHRPLANPORTAL: ABSOLUTE PRIORIT√ÑT - $ort1 bei $ort2 als Einheit erkannt");
                continue;
            }
            
            // =================================================================
            // ZWEITE PRIORIT√ÑT: 5-TEILIGE ST.-MUSTER
            // =================================================================
            
            // ‚úÖ St.[Stadt] an der [Fluss] (z.B. st, veit, an, der, glan)
            if ($current === 'st' && isset($orte_array[$i + 1]) &&
                isset($orte_array[$i + 2]) && strtolower(trim($orte_array[$i + 2])) === 'an' &&
                isset($orte_array[$i + 3]) && strtolower(trim($orte_array[$i + 3])) === 'der' &&
                isset($orte_array[$i + 4])) {
                
                $stadtname = $this->ucfirst_german(trim($orte_array[$i + 1]));
                $fluss = $this->ucfirst_german(trim($orte_array[$i + 4]));
                $processed_orte[] = 'St.' . $stadtname . ' an der ' . $fluss;
                $i += 5;
                error_log("FAHRPLANPORTAL: St.$stadtname an der $fluss als 5-teilige Einheit erkannt");
                continue;
            }
            
            // ‚úÖ St.[Stadt] ob der [Ort] (z.B. st, michael, ob, der, gurk)
            if ($current === 'st' && isset($orte_array[$i + 1]) &&
                isset($orte_array[$i + 2]) && strtolower(trim($orte_array[$i + 2])) === 'ob' &&
                isset($orte_array[$i + 3]) && strtolower(trim($orte_array[$i + 3])) === 'der' &&
                isset($orte_array[$i + 4])) {
                
                $stadtname = $this->ucfirst_german(trim($orte_array[$i + 1]));
                $ort = $this->ucfirst_german(trim($orte_array[$i + 4]));
                $processed_orte[] = 'St.' . $stadtname . ' ob der ' . $ort;
                $i += 5;
                error_log("FAHRPLANPORTAL: St.$stadtname ob der $ort als 5-teilige Einheit erkannt");
                continue;
            }
            
            // =================================================================
            // DRITTE PRIORIT√ÑT: 4-TEILIGE ST.-MUSTER
            // =================================================================
            
            // ‚úÖ St.[Name] im [Tal] (z.B. st, andr√§, im, lavanttal)
            if ($current === 'st' && isset($orte_array[$i + 1]) &&
                isset($orte_array[$i + 2]) && strtolower(trim($orte_array[$i + 2])) === 'im' &&
                isset($orte_array[$i + 3])) {
                
                $name = $this->ucfirst_german(trim($orte_array[$i + 1]));
                $tal = $this->ucfirst_german(trim($orte_array[$i + 3]));
                $processed_orte[] = 'St.' . $name . ' im ' . $tal;
                $i += 4;
                error_log("FAHRPLANPORTAL: St.$name im $tal als 4-teilige Einheit erkannt");
                continue;
            }
            
            // ‚úÖ St.[Name] am [Ort] (z.B. st, margarethen, am, t√∂llerberg)
            if ($current === 'st' && isset($orte_array[$i + 1]) &&
                isset($orte_array[$i + 2]) && strtolower(trim($orte_array[$i + 2])) === 'am' &&
                isset($orte_array[$i + 3])) {
                
                $name = $this->ucfirst_german(trim($orte_array[$i + 1]));
                $ort = $this->ucfirst_german(trim($orte_array[$i + 3]));
                $processed_orte[] = 'St.' . $name . ' am ' . $ort;
                $i += 4;
                error_log("FAHRPLANPORTAL: St.$name am $ort als 4-teilige Einheit erkannt");
                continue;
            }
            
            // ‚úÖ St.[Name] ob [Ort] (z.B. st, michael, ob, bleiburg)
            if ($current === 'st' && isset($orte_array[$i + 1]) &&
                isset($orte_array[$i + 2]) && strtolower(trim($orte_array[$i + 2])) === 'ob' &&
                isset($orte_array[$i + 3])) {
                
                $name = $this->ucfirst_german(trim($orte_array[$i + 1]));
                $ort = $this->ucfirst_german(trim($orte_array[$i + 3]));
                $processed_orte[] = 'St.' . $name . ' ob ' . $ort;
                $i += 4;
                error_log("FAHRPLANPORTAL: St.$name ob $ort als 4-teilige Einheit erkannt");
                continue;
            }
            
            // =================================================================
            // VIERTE PRIORIT√ÑT: 4-TEILIGE GENERISCHE MUSTER
            // =================================================================
            
            // ‚úÖ GENERISCHE REGEL f√ºr ALLE St√§dte mit "an der [fluss]"
            if (isset($orte_array[$i + 1]) && strtolower(trim($orte_array[$i + 1])) === 'an' &&
                isset($orte_array[$i + 2]) && strtolower(trim($orte_array[$i + 2])) === 'der' &&
                isset($orte_array[$i + 3])) {
                
                $stadtname = $this->ucfirst_german($current);
                $fluss = $this->ucfirst_german(trim($orte_array[$i + 3]));
                $processed_orte[] = $stadtname . ' an der ' . $fluss;
                $i += 4;
                error_log("FAHRPLANPORTAL: $stadtname an der $fluss als 4-teilige Einheit erkannt (generisch)");
                continue;
            }
            
            // =================================================================
            // F√úNFTE PRIORIT√ÑT: 3-TEILIGE MUSTER
            // =================================================================
            
            // ‚úÖ "klein" + "st" + Name = "Klein St.Name"
            if ($current === 'klein' && 
                isset($orte_array[$i + 1]) && strtolower(trim($orte_array[$i + 1])) === 'st' &&
                isset($orte_array[$i + 2])) {
                
                $name = $this->ucfirst_german(trim($orte_array[$i + 2]));
                $processed_orte[] = 'Klein St.' . $name;
                $i += 3;
                error_log("FAHRPLANPORTAL: Klein St.$name als 3-teilige Einheit erkannt");
                continue;
            }

            // ‚úÖ "gro√ü" + "st" + Name
            if ($current === 'gro√ü' && 
                isset($orte_array[$i + 1]) && strtolower(trim($orte_array[$i + 1])) === 'st' &&
                isset($orte_array[$i + 2])) {
                
                $name = $this->ucfirst_german(trim($orte_array[$i + 2]));
                $processed_orte[] = 'Gro√ü St.' . $name;
                $i += 3;
                error_log("FAHRPLANPORTAL: Gro√ü St.$name als 3-teilige Einheit erkannt");
                continue;
            }

            // ‚úÖ "alt" + "st" + Name
            if ($current === 'alt' && 
                isset($orte_array[$i + 1]) && strtolower(trim($orte_array[$i + 1])) === 'st' &&
                isset($orte_array[$i + 2])) {
                
                $name = $this->ucfirst_german(trim($orte_array[$i + 2]));
                $processed_orte[] = 'Alt St.' . $name;
                $i += 3;
                error_log("FAHRPLANPORTAL: Alt St.$name als 3-teilige Einheit erkannt");
                continue;
            }

            // ‚úÖ "neu" + "st" + Name
            if ($current === 'neu' && 
                isset($orte_array[$i + 1]) && strtolower(trim($orte_array[$i + 1])) === 'st' &&
                isset($orte_array[$i + 2])) {
                
                $name = $this->ucfirst_german(trim($orte_array[$i + 2]));
                $processed_orte[] = 'Neu St.' . $name;
                $i += 3;
                error_log("FAHRPLANPORTAL: Neu St.$name als 3-teilige Einheit erkannt");
                continue;
            }
            
            // ‚úÖ "ob der" Regel (nur wenn nicht von St.-Regeln erfasst)
            if ($current === 'ob' && 
                isset($orte_array[$i + 1]) && strtolower(trim($orte_array[$i + 1])) === 'der' &&
                isset($orte_array[$i + 2])) {
                
                $place = $this->ucfirst_german(trim($orte_array[$i + 2]));
                $processed_orte[] = 'ob der ' . $place;
                $i += 3;
                error_log("FAHRPLANPORTAL: ob der $place als 3-teilige Einheit erkannt");
                continue;
            }
            
            // =================================================================
            // SECHSTE PRIORIT√ÑT: 2-TEILIGE MUSTER
            // =================================================================
            
            // ‚úÖ Maria + beliebiger Ortsname
            if ($current === 'maria' && isset($orte_array[$i + 1])) {
                $next_ort = $this->ucfirst_german(trim($orte_array[$i + 1]));
                $processed_orte[] = 'Maria ' . $next_ort;
                $i += 2;
                error_log("FAHRPLANPORTAL: Maria $next_ort als 2-teilige Einheit erkannt");
                continue;
            }
            
            // ‚úÖ Bad + Ortsname
            if ($current === 'bad' && isset($orte_array[$i + 1])) {
                $next_ort = $this->ucfirst_german(trim($orte_array[$i + 1]));
                $processed_orte[] = 'Bad ' . $next_ort;
                $i += 2;
                error_log("FAHRPLANPORTAL: Bad $next_ort als 2-teilige Einheit erkannt");
                continue;
            }
            
            // ‚úÖ Firma + Firmenname
            if ($current === 'firma' && isset($orte_array[$i + 1])) {
                $firmenname = $this->ucfirst_german(trim($orte_array[$i + 1]));
                $processed_orte[] = 'Firma ' . $firmenname;
                $i += 2;
                error_log("FAHRPLANPORTAL: Firma $firmenname als 2-teilige Einheit erkannt");
                continue;
            }
            
            // ‚úÖ Standard "st" Verarbeitung (f√ºr einfache St.-Namen)
            if ($current === 'st' && isset($orte_array[$i + 1])) {
                $next_ort = trim($orte_array[$i + 1]);
                $combined = 'St.' . $this->ucfirst_german($next_ort);
                $processed_orte[] = $combined;
                $i += 2;
                error_log("FAHRPLANPORTAL: St.$next_ort als 2-teilige Einheit erkannt");
                continue;
            }
            
            // ‚úÖ "im" Regel
            if ($current === 'im' && isset($orte_array[$i + 1])) {
                $next_ort = $this->ucfirst_german(trim($orte_array[$i + 1]));
                $processed_orte[] = 'im ' . $next_ort;
                $i += 2;
                error_log("FAHRPLANPORTAL: im $next_ort als 2-teilige Einheit erkannt");
                continue;
            }
            
            // ‚úÖ "bahnhof" Regel
            if ($current === 'bahnhof') {
                $processed_orte[] = 'Bahnhof';
                $i++;
                error_log("FAHRPLANPORTAL: Bahnhof als Einzelwort erkannt");
                continue;
            }
            
            // =================================================================
            // LETZTE PRIORIT√ÑT: STANDARD-FALL
            // =================================================================
            
            // Standard-Fall: Einzelner Ortsteil
            $processed_orte[] = $this->ucfirst_german(trim($orte_array[$i]));
            $i++;
        }
        
        error_log("FAHRPLANPORTAL: Abk√ºrzungs-Verarbeitung Ende: " . implode(', ', $processed_orte));
        
        return $processed_orte;
    }
    
    /**
     * Hilfsfunktionen f√ºr verschiedene Aufgaben
     */
    public function get_pdf_url($pdf_pfad) {
        return home_url('/fahrplaene/' . $pdf_pfad);
    }
    
    public function format_german_date($date) {
        if (empty($date) || $date === '0000-00-00') {
            return '';
        }
        
        $timestamp = strtotime($date);
        if ($timestamp === false) {
            return $date;
        }
        
        return date('d.m.Y', $timestamp);
    }
    
    /**
     * ‚úÖ KORRIGIERT: Zeigt ALLE Tags vollst√§ndig an
     */
    public function format_tags_for_display($tags, $pdf_parsing_enabled = false) {
        if (!$pdf_parsing_enabled || empty($tags)) {
            return '';
        }
        
        // Tags in Array umwandeln und bereinigen
        $tags_array = explode(',', $tags);
        $tags_array = array_map('trim', $tags_array);
        $tags_array = array_filter($tags_array); // Leere Eintr√§ge entfernen
        
        // Alle Tags mit Komma getrennt zur√ºckgeben
        return implode(', ', $tags_array);
    }
}