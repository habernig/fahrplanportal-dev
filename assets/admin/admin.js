jQuery(document).ready(function($) {
    
    // ‚úÖ SOFORT-FIX: Strikte Admin-Kontext-Pr√ºfung
    console.log('FAHRPLANPORTAL: JavaScript geladen - Admin-Kontext-Pr√ºfung...');


    // FIX: jQuery Selektor-Sicherheit - NUR f√ºr ung√ºltige Text-Listen
    var originalFind = $.fn.find;
    $.fn.find = function(selector) {
        // Pr√ºfe ob der Selektor verd√§chtig aussieht (Kommas mit W√∂rtern ohne CSS-Syntax)
        if (typeof selector === 'string' && selector.indexOf(',') > -1) {
            // Pr√ºfe ob es wie eine Wortliste aussieht (keine CSS-Zeichen)
            // Erlaubt normale CSS-Selektoren wie "th, td" oder ".class1, .class2"
            if (!selector.match(/[#\.\[\]:>\+~\*=\(\)]/)) {
                // Weitere Pr√ºfung: Enth√§lt der Selektor deutsche St√§dtenamen oder √§hnliches?
                var parts = selector.split(',');
                var suspicious = false;
                for (var i = 0; i < parts.length; i++) {
                    var part = parts[i].trim();
                    // Wenn ein Teil l√§nger als 20 Zeichen ist oder Sonderzeichen enth√§lt, ist es verd√§chtig
                    if (part.length > 20 || part.match(/[√§√∂√º√ü]/i)) {
                        suspicious = true;
                        break;
                    }
                }
                if (suspicious) {
                    console.warn('FAHRPLANPORTAL: Ung√ºltiger Selektor abgefangen:', selector);
                    return $(); // Leeres jQuery-Objekt zur√ºckgeben
                }
            }
        }
        return originalFind.apply(this, arguments);
    };

    
    // ‚úÖ SOFORT-FIX: Admin-Kontext validieren
    if (typeof fahrplanportal_unified === 'undefined') {
        console.log('‚ùå FAHRPLANPORTAL: Admin-Kontext nicht erkannt - Script beendet');
        return; // Sofort beenden wenn kein Admin-Kontext
    }
    
    // ‚úÖ SOFORT-FIX: Admin-Kontext best√§tigen (alle Admin-Context-Namen)
    if (fahrplanportal_unified.context !== 'admin_fahrplanportal' && 
        fahrplanportal_unified.context !== 'admin_fahrplanportal_fixed' &&
        fahrplanportal_unified.context !== 'admin_fahrplanportal_ajax_fixed' &&
        fahrplanportal_unified.context !== 'admin_fahrplanportal_chunked') {
        console.log('‚ùå FAHRPLANPORTAL: Falscher Kontext (' + (fahrplanportal_unified.context || 'unbekannt') + ') - Script beendet');
        return; // Sofort beenden wenn falscher Kontext
    }
    
    console.log('‚úÖ FAHRPLANPORTAL: Admin-Kontext best√§tigt:', fahrplanportal_unified.context);
    console.log('‚úÖ FAHRPLANPORTAL: PDF-Parsing verf√ºgbar:', fahrplanportal_unified.pdf_parsing_enabled);
    
    // ‚úÖ SOFORT-FIX: Sanftes Warten auf Unified System (Admin-spezifisch)
    if (typeof UnifiedAjaxAPI === 'undefined') {
        console.log('üîÑ FAHRPLANPORTAL: Warte auf Unified AJAX API (Admin)...');
        
        var adminWaitAttempts = 0;
        var maxAdminWaitAttempts = 30; // 3 Sekunden Maximum
        
        var adminWaitInterval = setInterval(function() {
            adminWaitAttempts++;
            
            if (typeof UnifiedAjaxAPI !== 'undefined') {
                console.log('‚úÖ FAHRPLANPORTAL: Unified AJAX API verf√ºgbar nach ' + adminWaitAttempts + ' Versuchen');
                clearInterval(adminWaitInterval);
                initializeFahrplanportalAdmin();
                return;
            }
            
            if (adminWaitAttempts >= maxAdminWaitAttempts) {
                console.error('‚ùå FAHRPLANPORTAL: Unified AJAX API nach ' + maxAdminWaitAttempts + ' Versuchen nicht verf√ºgbar');
                clearInterval(adminWaitInterval);
                initializeFahrplanportalFallback();
                return;
            }
        }, 100);
        
        return;
    }
    
    // ‚úÖ Sofort initialisieren falls verf√ºgbar
    console.log('‚úÖ FAHRPLANPORTAL: Unified AJAX API sofort verf√ºgbar');
    initializeFahrplanportalAdmin();
    
    // ========================================
// HAUPT-INITIALISIERUNG (ADMIN-ONLY)
// ========================================
function initializeFahrplanportalAdmin() {
    console.log('üöÄ FAHRPLANPORTAL: Initialisiere Admin-Interface...');
    
    var pdfParsingEnabled = fahrplanportal_unified.pdf_parsing_enabled || false;
    
    // ‚úÖ GEFIXTER AJAX Helper f√ºr Admin-Funktionen
    function fahrplanAdminCall(action, data, options) {
        var defaults = {
            success: function(response) { 
                console.log("‚úÖ Fahrplan Admin AJAX Success (" + action + "):", response); 
            },
            error: function(error) { 
                console.error("‚ùå Fahrplan Admin AJAX Error (" + action + "):", error); 
            },
            beforeSend: function() {
                console.log("üîÑ Fahrplan Admin AJAX Start:", action);
            }
        };
        
        var settings = Object.assign({}, defaults, options || {});
        
        // ‚úÖ KRITISCHER FIX: Pr√ºfung ob Unified System verf√ºgbar
        if (typeof UnifiedAjaxAPI !== 'undefined' && UnifiedAjaxAPI && typeof UnifiedAjaxAPI.call === 'function') {
            console.log("‚úÖ FAHRPLANPORTAL: Verwende Unified AJAX System");
            return UnifiedAjaxAPI.call('fahrplanportal', action, data, settings);
        } else {
            console.warn("‚ö†Ô∏è FAHRPLANPORTAL: Unified AJAX nicht verf√ºgbar, verwende WordPress AJAX Fallback");
            
            // ‚úÖ FALLBACK: Standard WordPress AJAX
            var ajaxData = {
                action: 'unified_ajax',
                module: 'fahrplanportal',
                module_action: action,
                nonce: fahrplanportal_unified.nonce
            };
            
            // Data-Parameter hinzuf√ºgen
            if (data && typeof data === 'object') {
                for (var key in data) {
                    if (data.hasOwnProperty(key)) {
                        ajaxData[key] = data[key];
                    }
                }
            }
            
            return jQuery.ajax({
                url: fahrplanportal_unified.ajax_url,
                type: 'POST',
                dataType: 'json',
                data: ajaxData,
                beforeSend: settings.beforeSend,
                success: function(response) {
                    if (response && response.success) {
                        settings.success(response.data);
                    } else {
                        var errorMsg = (response && response.data) ? response.data : 'Unbekannter Fehler';
                        settings.error({ message: errorMsg });
                    }
                },
                error: function(xhr, status, error) {
                    console.error("‚ùå FAHRPLANPORTAL: WordPress AJAX Fehler:", xhr.responseText);
                    settings.error({ 
                        message: error || 'AJAX-Verbindungsfehler',
                        xhr: xhr,
                        status: status
                    });
                }
            });
        }
    }
    
    // ========================================
    // ‚úÖ ERWEITERT: CHUNKED SCANNING MIT DB-BEREINIGUNG
    // ========================================
    
    // Globalen chunkingScanState erweitern um detaillierte Fehlersammlung
    var chunkingScanState = {
        active: false,
        folder: '',
        totalChunks: 0,
        currentChunk: 0,
        totalFiles: 0,
        totalStats: {
            imported: 0,
            skipped: 0,
            errors: 0,
            processed: 0
        },
        regionStats: {},
        startTime: null,
        cancelled: false,
        databaseCleared: false,
        
        // ‚úÖ NEU: Detaillierte Fehlersammlung
        errorDetails: [],           // Array f√ºr alle Fehler
        errorsByType: {},          // Gruppierung nach Fehlertyp
        errorsByRegion: {},        // Gruppierung nach Region
        currentChunkErrors: []     // Fehler des aktuellen Chunks
    };


    // ‚úÖ NEU: Tag-Cleanup in bestehender Datenbank
    $('#cleanup-existing-tags').on('click', function() {
        var $btn = $(this);
        var $status = $('#cleanup-status');
        
        // Sicherheitsabfrage
        var confirmed = confirm(
            'üßπ Tag-Bereinigung starten?\n\n' +
            'Diese Funktion entfernt alle Exklusionsw√∂rter aus den bereits gespeicherten Tags in der Datenbank.\n\n' +
            '‚ö†Ô∏è Wichtig: Stellen Sie sicher, dass Ihre Exklusionsliste aktuell ist.\n' +
            'Die √Ñnderungen sind nicht r√ºckg√§ngig zu machen!\n\n' +
            'Fortfahren?'
        );
        
        if (!confirmed) {
            return;
        }
        
        // UI f√ºr Loading-State vorbereiten
        $btn.prop('disabled', true);
        $status.html('<span style="color: orange;">üîÑ Bereinige Tags in Datenbank...</span>');
        
        // Detaillierte Progress-Anzeige
        var startTime = Date.now();
        var progressInterval = setInterval(function() {
            var elapsed = Math.round((Date.now() - startTime) / 1000);
            $status.html('<span style="color: orange;">üîÑ Bereinige Tags... (' + elapsed + 's)</span>');
        }, 1000);
        
        // AJAX-Call zur Tag-Bereinigung
        fahrplanAdminCall('cleanup_existing_tags', {}, {
            success: function(response) {
                clearInterval(progressInterval);
                
                // Detaillierte Erfolgs-Statistiken anzeigen
                var stats = response;
                var message = '';
                
                if (stats.updated_fahrplaene === 0) {
                    message = '‚úÖ Keine Bereinigung n√∂tig - alle Tags sind bereits sauber!';
                } else {
                    message = '‚úÖ Tag-Bereinigung erfolgreich abgeschlossen!\n\n';
                    message += 'üìä Statistiken:\n';
                    message += '‚Ä¢ ' + stats.updated_fahrplaene + ' Fahrpl√§ne aktualisiert\n';
                    message += '‚Ä¢ ' + stats.removed_words + ' W√∂rter entfernt\n';
                    message += '‚Ä¢ ' + stats.total_fahrplaene + ' Fahrpl√§ne insgesamt gepr√ºft\n';
                    message += '‚Ä¢ ' + stats.exclusion_count + ' W√∂rter in Exklusionsliste\n';
                    
                    if (stats.efficiency) {
                        message += '‚Ä¢ ‚åÄ ' + stats.efficiency + ' W√∂rter pro Fahrplan entfernt\n';
                    }
                    
                    message += '‚Ä¢ ‚è±Ô∏è Verarbeitungszeit: ' + stats.processing_time + 's';
                }
                
                // Status-Anzeige aktualisieren
                $status.html('<span style="color: green;">' + 
                    stats.updated_fahrplaene + ' Fahrpl√§ne bereinigt, ' + 
                    stats.removed_words + ' W√∂rter entfernt (' + 
                    stats.processing_time + 's)</span>');
                
                // Alert mit Details
                alert(message);
                
                // Status nach 5 Sekunden ausblenden
                setTimeout(function() {
                    $status.html('');
                }, 5000);
                
                console.log('‚úÖ FAHRPLANPORTAL: Tag-Cleanup abgeschlossen', stats);
            },
            error: function(error) {
                clearInterval(progressInterval);
                
                var errorMsg = error.message || 'Unbekannter Fehler';
                $status.html('<span style="color: red;">‚úó Fehler: ' + errorMsg + '</span>');
                
                // Detaillierte Fehlermeldung
                alert('‚ùå Fehler bei Tag-Bereinigung:\n\n' + errorMsg + '\n\nBitte pr√ºfen Sie:\n' +
                      '‚Ä¢ Ist die Exklusionsliste gespeichert?\n' +
                      '‚Ä¢ Ist PDF-Parsing aktiviert?\n' +
                      '‚Ä¢ Haben Sie die n√∂tigen Berechtigungen?');
                
                console.error('‚ùå FAHRPLANPORTAL: Tag-Cleanup Fehler:', error);
            },
            complete: function() {
                clearInterval(progressInterval);
                $btn.prop('disabled', false);
            }
        });
    });

    // ‚úÖ NEU: Hilfs-Tooltip f√ºr Tag-Cleanup Button
    $('#cleanup-existing-tags').on('mouseenter', function() {
        $(this).attr('title', 
            'Entfernt alle Exklusionsw√∂rter aus bereits gespeicherten Tags in der Datenbank. ' +
            'N√ºtzlich nach √Ñnderungen an der Exklusionsliste.'
        );
    });


    /**
     * ‚úÖ SICHERER START: Fehlersammlung initialisieren
     */
    function initializeErrorCollection() {
        if (!chunkingScanState) {
            console.error('‚ùå FAHRPLANPORTAL: chunkingScanState nicht definiert!');
            return;
        }
        
        // Alle Fehler-Arrays sicher initialisieren
        chunkingScanState.errorDetails = chunkingScanState.errorDetails || [];
        chunkingScanState.errorsByRegion = chunkingScanState.errorsByRegion || {};
        chunkingScanState.errorsByType = chunkingScanState.errorsByType || {};
        chunkingScanState.currentChunkErrors = chunkingScanState.currentChunkErrors || [];
        
        console.log('‚úÖ FAHRPLANPORTAL: Fehlersammlung initialisiert');
    }

    /**
     * ‚úÖ NEU: Fehler zu Sammlung hinzuf√ºgen
     */
    function addErrorToCollection(error, file, region) {
        // ‚úÖ KRITISCHER FIX: Sicherstellen dass Arrays existieren
        if (!chunkingScanState.errorDetails) {
            chunkingScanState.errorDetails = [];
        }
        if (!chunkingScanState.errorsByRegion) {
            chunkingScanState.errorsByRegion = {};
        }
        if (!chunkingScanState.errorsByType) {
            chunkingScanState.errorsByType = {};
        }
        
        var errorEntry = {
            timestamp: new Date().toISOString(),
            file: file || 'Unbekannte Datei',
            error: error || 'Unbekannter Fehler',
            region: region || 'Unbekannte Region',
            chunk: chunkingScanState.currentChunk || 0
        };
        
        try {
            // Zu globaler Fehlersammlung hinzuf√ºgen
            chunkingScanState.errorDetails.push(errorEntry);
            
            // Nach Region gruppieren
            if (!chunkingScanState.errorsByRegion[errorEntry.region]) {
                chunkingScanState.errorsByRegion[errorEntry.region] = 0;
            }
            chunkingScanState.errorsByRegion[errorEntry.region]++;
            
            // Nach Fehlertyp gruppieren
            var errorType = categorizeError(error);
            if (!chunkingScanState.errorsByType[errorType]) {
                chunkingScanState.errorsByType[errorType] = 0;
            }
            chunkingScanState.errorsByType[errorType]++;
            
            console.log('‚úÖ FAHRPLANPORTAL: Fehler erfolgreich gesammelt:', errorEntry);
            
        } catch (collectionError) {
            console.error('‚ùå FAHRPLANPORTAL: Fehler beim Sammeln von Fehlern:', collectionError);
            console.error('‚ùå Original-Fehler war:', error, 'f√ºr Datei:', file);
        }
    }

    /**
     * ‚úÖ NEU: Fehler kategorisieren
     */
    function categorizeError(errorMessage) {
        if (!errorMessage) return 'Unbekannter Fehler';
        
        var errorLower = errorMessage.toLowerCase();
        
        if (errorLower.includes('dateiname') || errorLower.includes('filename')) {
            return 'Dateiname-Parsing Fehler';
        } else if (errorLower.includes('database') || errorLower.includes('db') || errorLower.includes('insert')) {
            return 'Datenbank Fehler';
        } else if (errorLower.includes('pdf') && errorLower.includes('parsing')) {
            return 'PDF-Parsing Fehler';
        } else if (errorLower.includes('nicht gefunden') || errorLower.includes('not found')) {
            return 'Datei nicht gefunden';
        } else if (errorLower.includes('permission') || errorLower.includes('berechtigung')) {
            return 'Berechtigung Fehler';
        } else if (errorLower.includes('format') || errorLower.includes('invalid')) {
            return 'Format Fehler';
        } else {
            return 'Allgemeiner Fehler';
        }
    }
    
    /**
     * ‚úÖ ERWEITERT: Chunked Scanning mit DB-Bereinigung starten
     */
    function startChunkedScanning() {
        var folder = $('#scan-year').val();
        var button = $('#scan-directory');
        var status = $('#scan-status');
        
        if (!folder) {
            status.html('<span style="color: red;">‚úó Bitte einen Ordner ausw√§hlen</span>');
            return;
        }
        
        console.log('üöÄ FAHRPLANPORTAL: Starte Chunked Scanning f√ºr Ordner:', folder);
        
        // ‚úÖ NEU: Best√§tigungsdialog vor DB-Bereinigung
        showDatabaseClearConfirmation(folder);
    }
    
    /**
     * ‚úÖ NEU: Best√§tigungsdialog f√ºr Datenbank-Bereinigung
     */
    function showDatabaseClearConfirmation(folder) {
        var confirmationHtml = `
            <div id="db-clear-confirmation" style="
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.7);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 999999;
                animation: fadeIn 0.3s ease;
            ">
                <div style="
                    background: white;
                    border-radius: 12px;
                    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
                    max-width: 500px;
                    width: 90%;
                    max-height: 90vh;
                    overflow: hidden;
                    animation: slideIn 0.3s ease;
                ">
                    <!-- Header -->
                    <div style="
                        background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
                        color: white;
                        padding: 20px 25px;
                        text-align: center;
                    ">
                        <div style="font-size: 48px; margin-bottom: 10px;">‚ö†Ô∏è</div>
                        <h2 style="margin: 0; font-size: 20px; font-weight: 600;">
                            Datenbank wird bereinigt!
                        </h2>
                    </div>
                    
                    <!-- Body -->
                    <div style="padding: 30px 25px;">
                        <div style="
                            background: #fff3cd;
                            border: 2px solid #ffeaa7;
                            border-radius: 8px;
                            padding: 20px;
                            margin-bottom: 25px;
                            text-align: center;
                        ">
                            <strong style="color: #856404; font-size: 16px; display: block; margin-bottom: 10px;">
                                ACHTUNG: Alle bestehenden Fahrpl√§ne werden gel√∂scht!
                            </strong>
                            <p style="color: #856404; margin: 0; line-height: 1.5;">
                                Vor dem Scannen des Ordners <strong>"${folder}"</strong> wird die komplette 
                                Fahrplan-Datenbank geleert. Alle vorhandenen Eintr√§ge gehen unwiderruflich verloren.
                            </p>
                        </div>
                        
                        <div style="
                            background: #e3f2fd;
                            border: 2px solid #90caf9;
                            border-radius: 8px;
                            padding: 15px;
                            margin-bottom: 25px;
                        ">
                            <p style="color: #1565c0; margin: 0; font-size: 14px; line-height: 1.4;">
                                <strong>üìä Ablauf:</strong><br>
                                1. Alle bestehenden Fahrplan-Eintr√§ge l√∂schen<br>
                                2. Ordner "${folder}" scannen und neue Daten importieren<br>
                                3. Datenbank enth√§lt nur noch die neuen Scan-Ergebnisse
                            </p>
                        </div>
                        
                        <p style="
                            text-align: center;
                            font-size: 16px;
                            color: #333;
                            margin: 0 0 20px 0;
                            font-weight: 500;
                        ">
                            M√∂chten Sie wirklich fortfahren?
                        </p>
                    </div>
                    
                    <!-- Footer -->
                    <div style="
                        padding: 20px 25px;
                        background: #f8f9fa;
                        border-top: 1px solid #dee2e6;
                        display: flex;
                        justify-content: center;
                        gap: 15px;
                    ">
                        <button id="confirm-db-clear-cancel" style="
                            background: #6c757d;
                            color: white;
                            border: none;
                            padding: 12px 25px;
                            border-radius: 6px;
                            font-size: 14px;
                            font-weight: 600;
                            cursor: pointer;
                            transition: all 0.2s ease;
                            min-width: 120px;
                        ">
                            ‚ùå Abbrechen
                        </button>
                        <button id="confirm-db-clear-proceed" style="
                            background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
                            color: white;
                            border: none;
                            padding: 12px 25px;
                            border-radius: 6px;
                            font-size: 14px;
                            font-weight: 600;
                            cursor: pointer;
                            transition: all 0.2s ease;
                            min-width: 120px;
                            box-shadow: 0 4px 12px rgba(220, 53, 69, 0.3);
                        ">
                            üóëÔ∏è L√∂schen & Scannen
                        </button>
                    </div>
                </div>
            </div>
            
            <style>
            @keyframes fadeIn {
                from { opacity: 0; }
                to { opacity: 1; }
            }
            @keyframes slideIn {
                from { 
                    opacity: 0; 
                    transform: translateY(-50px) scale(0.9); 
                }
                to { 
                    opacity: 1; 
                    transform: translateY(0) scale(1); 
                }
            }
            #confirm-db-clear-cancel:hover {
                background: #5a6268 !important;
                transform: translateY(-2px);
            }
            #confirm-db-clear-proceed:hover {
                background: linear-gradient(135deg, #c82333 0%, #a02622 100%) !important;
                transform: translateY(-2px);
                box-shadow: 0 6px 16px rgba(220, 53, 69, 0.4) !important;
            }
            </style>
        `;
        
        // Dialog zum Body hinzuf√ºgen
        $('body').append(confirmationHtml);
        
        // Event Handler f√ºr Buttons
        $('#confirm-db-clear-cancel').on('click', function() {
            hideDatabaseClearConfirmation();
            resetScanButton();
            console.log('üö´ FAHRPLANPORTAL: DB-Bereinigung abgebrochen vom Benutzer');
        });
        
        $('#confirm-db-clear-proceed').on('click', function() {
            hideDatabaseClearConfirmation();
            confirmAndClearDatabase(folder);
            console.log('‚úÖ FAHRPLANPORTAL: DB-Bereinigung best√§tigt, starte Prozess');
        });
        
        // ESC-Taste zum Abbrechen
        $(document).on('keydown.db-clear-confirmation', function(e) {
            if (e.key === 'Escape') {
                $('#confirm-db-clear-cancel').click();
            }
        });
    }
    
    /**
     * ‚úÖ NEU: Best√§tigungsdialog verstecken
     */
    function hideDatabaseClearConfirmation() {
        $('#db-clear-confirmation').fadeOut(300, function() {
            $(this).remove();
        });
        $(document).off('keydown.db-clear-confirmation');
    }
    
    /**
     * ‚úÖ NEU: Datenbank bereinigen und dann scannen
     */
    function confirmAndClearDatabase(folder) {
        var button = $('#scan-directory');
        var status = $('#scan-status');
        
        // Button deaktivieren und Status anzeigen
        button.prop('disabled', true).text('Bereinige Datenbank...');
        status.html('<span style="color: orange;">üóëÔ∏è L√∂sche alle bestehenden Fahrpl√§ne...</span>');
        
        console.log('üóëÔ∏è FAHRPLANPORTAL: Starte Datenbank-Bereinigung vor Scan');
        
        // Datenbank leeren
        fahrplanAdminCall('clear_db', {}, {
            success: function(response) {
                console.log('‚úÖ FAHRPLANPORTAL: Datenbank erfolgreich bereinigt');
                status.html('<span style="color: green;">‚úÖ Datenbank bereinigt - starte Scanning...</span>');
                
                // Kurze Pause f√ºr Benutzer-Feedback, dann Scanning starten
                setTimeout(function() {
                    proceedWithScanning(folder);
                }, 1000);
            },
            error: function(error) {
                console.error('‚ùå FAHRPLANPORTAL: Fehler beim Bereinigen der Datenbank:', error);
                status.html('<span style="color: red;">‚ùå Fehler beim Bereinigen: ' + error.message + '</span>');
                resetScanButton();
                
                // Fehler-Dialog anzeigen
                alert('Fehler beim Bereinigen der Datenbank:\n\n' + error.message + '\n\nScannen wurde abgebrochen.');
            }
        });
    }
    
    /**
     * ‚úÖ ERWEITERT: Procced with Scanning mit sicherer Initialisierung
     */
    function proceedWithScanning(folder) {
        var button = $('#scan-directory');
        var status = $('#scan-status');
        
        console.log('üöÄ FAHRPLANPORTAL: Beginne Chunked Scanning nach DB-Bereinigung f√ºr Ordner:', folder);
        
        // Button-Text aktualisieren
        button.text('Bereite Scanning vor...');
        status.html('<span style="color: blue;">üìä Sammle Scan-Informationen...</span>');
        
        // ‚úÖ State komplett neu initialisieren
        chunkingScanState = {
            active: true,
            folder: folder,
            totalChunks: 0,
            currentChunk: 0,
            totalFiles: 0,
            totalStats: {
                imported: 0,
                skipped: 0,
                errors: 0,
                processed: 0
            },
            regionStats: {},
            startTime: Date.now(),
            cancelled: false,
            databaseCleared: true,
            
            // ‚úÖ SICHER: Arrays direkt initialisieren
            errorDetails: [],
            errorsByRegion: {},
            errorsByType: {},
            currentChunkErrors: []
        };
        
        // ‚úÖ ZUS√ÑTZLICHE SICHERHEIT: Explizit initialisieren
        initializeErrorCollection();
        
        // Scan-Informationen laden
        fahrplanAdminCall('get_scan_info', {folder: folder}, {
            success: function(scanInfo) {
                console.log('‚úÖ FAHRPLANPORTAL: Scan-Info erhalten nach DB-Bereinigung:', scanInfo);
                
                chunkingScanState.totalChunks = scanInfo.total_chunks;
                chunkingScanState.totalFiles = scanInfo.total_files;
                
                // Status zur√ºcksetzen
                status.html('');
                
                // Progress Bar anzeigen
                showProgressBar(scanInfo);
                
                // Zus√§tzliche Info dass DB bereinigt wurde
                updateScanActivity('üóëÔ∏è Datenbank erfolgreich bereinigt - alle alten Eintr√§ge entfernt');
                updateScanActivity('üöÄ Starte Chunked Scanning f√ºr bereinigte Datenbank...');
                
                
                // Chunked Scanning starten
                processNextChunk();
            },
            error: function(error) {
                console.error('‚ùå FAHRPLANPORTAL: Fehler beim Laden der Scan-Info nach DB-Bereinigung:', error);
                status.html('<span style="color: red;">‚ùå Fehler beim Vorbereiten: ' + error.message + '</span>');
                resetScanButton();
            }
        });
    }
    
    /**
     * ‚úÖ SICHER: Chunk-Verarbeitung mit Fehlerbehandlung
     */
    function processNextChunk() {
        if (chunkingScanState.cancelled) {
            console.log('üõë FAHRPLANPORTAL: Chunked Scanning abgebrochen');
            return;
        }
        
        if (chunkingScanState.currentChunk >= chunkingScanState.totalChunks) {
            console.log('‚úÖ FAHRPLANPORTAL: Alle Chunks verarbeitet');
            completeScan();
            return;
        }


        
        // ‚úÖ SICHERHEIT: Fehlersammlung vor jedem Chunk pr√ºfen
        initializeErrorCollection();
        
        var chunkIndex = chunkingScanState.currentChunk;
        var chunkSize = 10;
        
        console.log('üîÑ FAHRPLANPORTAL: Verarbeite Chunk', chunkIndex + 1, 'von', chunkingScanState.totalChunks);
        
        // Chunk-Info aktualisieren
        $('#scan-current-chunk').text((chunkIndex + 1) + '/' + chunkingScanState.totalChunks);
        updateScanActivity('üîÑ Verarbeite Chunk ' + (chunkIndex + 1) + '/' + chunkingScanState.totalChunks + '...');
        
        fahrplanAdminCall('scan_chunk', {
            folder: chunkingScanState.folder,
            chunk_index: chunkIndex,
            chunk_size: chunkSize
        }, {
            success: function(chunkResult) {
                console.log('‚úÖ FAHRPLANPORTAL: Chunk', chunkIndex + 1, 'erfolgreich verarbeitet:', chunkResult);
                
                // Statistiken aktualisieren
                chunkingScanState.totalStats.imported += chunkResult.stats.imported || 0;
                chunkingScanState.totalStats.skipped += chunkResult.stats.skipped || 0;
                chunkingScanState.totalStats.errors += chunkResult.stats.errors || 0;
                chunkingScanState.totalStats.processed += chunkResult.stats.processed || 0;
                
                // ‚úÖ SICHER: Fehler aus Server-Response sammeln (mit Try-Catch)
                try {
                    // Variante 1: Fehler direkt in Response
                    if (chunkResult.errors && Array.isArray(chunkResult.errors)) {
                        chunkResult.errors.forEach(function(error) {
                            addErrorToCollection(
                                error.message || error.error || 'Unbekannter Server-Fehler',
                                error.file || error.filename || 'Unbekannte Datei',
                                error.region || 'Unbekannte Region'
                            );
                        });
                    }
                    
                    // Variante 2: Fehler in Stats
                    if (chunkResult.stats && chunkResult.stats.error_details && Array.isArray(chunkResult.stats.error_details)) {
                        chunkResult.stats.error_details.forEach(function(errorDetail) {
                            addErrorToCollection(
                                errorDetail.error || 'Unbekannter Fehler',
                                errorDetail.file || 'Unbekannte Datei',
                                errorDetail.region || 'Unbekannte Region'
                            );
                        });
                    }
                    
                    // ‚úÖ FALLBACK: Wenn Errors > 0 aber keine Details, generische Fehler erstellen
                    var reportedErrors = chunkResult.stats.errors || 0;
                    var collectedErrors = chunkingScanState.errorDetails.length;
                    
                    if (reportedErrors > 0 && collectedErrors === 0) {
                        console.warn('‚ö†Ô∏è FAHRPLANPORTAL: Server meldet ' + reportedErrors + ' Fehler, aber keine Details - erstelle generische Eintr√§ge');
                        
                        for (var i = 0; i < reportedErrors; i++) {
                            addErrorToCollection(
                                'Fehler beim Verarbeiten (Server-Details nicht verf√ºgbar)',
                                'Chunk ' + (chunkIndex + 1) + ' - Datei #' + (i + 1),
                                'Unbekannte Region'
                            );
                        }
                    }
                    
                } catch (errorProcessingError) {
                    console.error('‚ùå FAHRPLANPORTAL: Fehler beim Verarbeiten der Server-Fehler:', errorProcessingError);
                    addErrorToCollection(
                        'Fehler beim Verarbeiten der Chunk-Antwort: ' + errorProcessingError.message,
                        'Chunk ' + (chunkIndex + 1),
                        'JavaScript-Fehler'
                    );
                }
                
                // Regionen-Statistiken zusammenf√ºhren
                if (chunkResult.stats.region_stats) {
                    for (var region in chunkResult.stats.region_stats) {
                        if (!chunkingScanState.regionStats[region]) {
                            chunkingScanState.regionStats[region] = 0;
                        }
                        chunkingScanState.regionStats[region] += chunkResult.stats.region_stats[region];
                    }
                }
                
                // Progress Bar aktualisieren
                updateProgressBar();
                
                // Aktivit√§t aktualisieren
                if (chunkResult.stats.processed > 0) {
                    var regionList = [];
                    if (chunkResult.stats.region_stats) {
                        for (var region in chunkResult.stats.region_stats) {
                            regionList.push(region + ': ' + chunkResult.stats.region_stats[region] + ' PDFs');
                        }
                    }
                    
                    var activityMessage = '‚úÖ Chunk ' + (chunkIndex + 1) + ' fertig';
                    if (regionList.length > 0) {
                        activityMessage += ': ' + regionList.join(', ');
                    }
                    updateScanActivity(activityMessage);
                    
                    // Fehler-Info f√ºr Chunk anzeigen
                    if (chunkResult.stats.errors > 0) {
                        updateScanActivity('‚ö†Ô∏è Chunk ' + (chunkIndex + 1) + ' hatte ' + chunkResult.stats.errors + ' Fehler');
                    }
                }
                
                // N√§chsten Chunk verarbeiten
                chunkingScanState.currentChunk++;
                setTimeout(processNextChunk, 500);
            },
            error: function(error) {
                console.error('‚ùå FAHRPLANPORTAL: Chunk', chunkIndex + 1, 'fehlgeschlagen:', error);
                
                // ‚úÖ SICHER: AJAX-Fehler sammeln
                try {
                    addErrorToCollection(
                        'Chunk-Verarbeitung fehlgeschlagen: ' + (error.message || error.responseText || 'Unbekannter AJAX-Fehler'),
                        'Chunk ' + (chunkIndex + 1),
                        'Server-Fehler'
                    );
                } catch (ajaxErrorCollectionError) {
                    console.error('‚ùå Konnte AJAX-Fehler nicht sammeln:', ajaxErrorCollectionError);
                }
                
                chunkingScanState.totalStats.errors++;
                updateProgressBar();
                updateScanActivity('‚ùå Chunk ' + (chunkIndex + 1) + ' fehlgeschlagen: ' + (error.message || 'Unbekannter Fehler'));
                
                // Trotzdem weitermachen mit n√§chstem Chunk
                chunkingScanState.currentChunk++;
                setTimeout(processNextChunk, 1000);
            }
        });
    }
    
    /**
     * ‚úÖ ERWEITERT: Progress Bar anzeigen mit DB-Bereinigung Info
     */
    function showProgressBar(scanInfo) {
        // Normale Controls verstecken
        $('.fahrplan-controls').hide();
        
        // Progress Container anzeigen
        $('#scan-progress-container').show();
        
        // Initial-Werte setzen
        $('#scan-progress-text').text('0% (0/' + scanInfo.total_files + ' PDFs)');
        $('#scan-time-remaining').text('Gesch√§tzte Zeit: ' + scanInfo.estimated_time.formatted);
        $('#scan-current-file').text('Bereite vor...');
        $('#scan-current-chunk').text('0/' + scanInfo.total_chunks);
        
        // ‚úÖ ERWEITERT: Bereinigung-Info in Header
        var headerText = 'PDF-Scanning l√§uft...';
        if (chunkingScanState.databaseCleared) {
            headerText = 'PDF-Scanning l√§uft (Datenbank bereinigt)...';
        }
        $('#scan-progress-container h4').html(
            '<i class="dashicons dashicons-update-alt" style="animation: spin 1s linear infinite;"></i>' +
            headerText
        );
        
        // Regionen-Info hinzuf√ºgen
        var regionInfo = 'Gefundene Regionen: ';
        var regionList = [];
        for (var region in scanInfo.regions) {
            regionList.push(region + ' (' + scanInfo.regions[region] + ' PDFs)');
        }
        regionInfo += regionList.join(', ');
        
        updateScanActivity('üìä ' + regionInfo);
        
        if (scanInfo.parsing_enabled) {
            updateScanActivity('üîß PDF-Parsing aktiviert - Tags werden automatisch extrahiert');
        } else {
            updateScanActivity('‚ö†Ô∏è PDF-Parsing nicht verf√ºgbar - nur Metadaten werden gespeichert');
        }
        
        // ‚úÖ NEU: Hinweis dass alle Daten neu sind
        if (chunkingScanState.databaseCleared) {
            updateScanActivity('üíæ Alle Eintr√§ge werden als neue Daten importiert (keine Duplikat-Pr√ºfung n√∂tig)');
        }
    }
    
    /**
     * ‚úÖ NEU: Progress Bar aktualisieren
     */
    function updateProgressBar() {
        var processed = chunkingScanState.totalStats.processed;
        var total = chunkingScanState.totalFiles;
        var percentage = total > 0 ? Math.round((processed / total) * 100) : 0;
        
        // Progress Bar
        $('#scan-progress-bar').css('width', percentage + '%');
        
        // Progress Text
        $('#scan-progress-text').text(percentage + '% (' + processed + '/' + total + ' PDFs)');
        
        // Zeit-Sch√§tzung
        var elapsed = Date.now() - chunkingScanState.startTime;
        var remaining = 0;
        
        if (processed > 0) {
            var avgTimePerFile = elapsed / processed;
            var remainingFiles = total - processed;
            remaining = Math.round(avgTimePerFile * remainingFiles / 1000);
        }
        
        if (remaining > 0) {
            $('#scan-time-remaining').text('Noch ca. ' + formatDuration(remaining));
        } else {
            $('#scan-time-remaining').text('Berechne...');
        }
        
        // Statistiken aktualisieren
        $('#scan-imported').text(chunkingScanState.totalStats.imported);
        $('#scan-skipped').text(chunkingScanState.totalStats.skipped);
        $('#scan-errors').text(chunkingScanState.totalStats.errors);
    }
    
    /**
     * ‚úÖ NEU: Aktivit√§t aktualisieren
     */
    function updateScanActivity(message) {
        var activityContainer = $('#scan-region-activity');
        var timestamp = new Date().toLocaleTimeString();
        
        var newEntry = '<div style="margin-bottom: 2px;">' +
                       '<span style="color: #666;">' + timestamp + '</span> ' +
                       '<span>' + message + '</span>' +
                       '</div>';
        
        activityContainer.prepend(newEntry);
        
        // Nur die letzten 20 Eintr√§ge behalten
        var entries = activityContainer.find('div');
        if (entries.length > 20) {
            entries.slice(20).remove();
        }
    }
    

    /**
     * ‚úÖ ERWEITERT: Scan abschlie√üen mit persistentem Fehlerprotokoll
     */
    function completeScan() {
        var stats = chunkingScanState.totalStats;
        var duration = Math.round((Date.now() - chunkingScanState.startTime) / 1000);
        
        console.log('üéâ FAHRPLANPORTAL: Chunked Scanning abgeschlossen:', stats);
        
        // Progress Bar auf 100%
        $('#scan-progress-bar').css('width', '100%');
        $('#scan-progress-text').text('100% (' + stats.processed + '/' + chunkingScanState.totalFiles + ' PDFs)');
        $('#scan-time-remaining').text('Abgeschlossen in ' + formatDuration(duration));
        
        // Erfolgs-Meldung
        var successMessage = 'üéâ Chunked Scanning abgeschlossen! ';
        if (chunkingScanState.databaseCleared) {
            successMessage += '(Datenbank bereinigt) ';
        }
        successMessage += 'Importiert: ' + stats.imported + ', ' +
                         '√úbersprungen: ' + stats.skipped + ', ' +
                         'Fehler: ' + stats.errors + ' ' +
                         '(Dauer: ' + formatDuration(duration) + ')';
        
        updateScanActivity(successMessage);
        
        if (chunkingScanState.databaseCleared) {
            updateScanActivity('üíæ Datenbank-Zustand: Komplett neu aufgebaut mit ' + stats.imported + ' Eintr√§gen');
        }
        
        // Regionen-Zusammenfassung
        var regionSummary = 'Regionen-√úbersicht: ';
        var regionList = [];
        for (var region in chunkingScanState.regionStats) {
            regionList.push(region + ' (' + chunkingScanState.regionStats[region] + ')');
        }
        regionSummary += regionList.join(', ');
        updateScanActivity('üìä ' + regionSummary);
        
        // ‚úÖ NEU: Fehlerprotokoll sammeln und anzeigen
        var errorSummary = collectErrorSummary();
        if (errorSummary.totalErrors > 0) {
            showErrorProtocol(errorSummary);
        }
        
        // Progress Bar zu Erfolg √§ndern
        $('#scan-progress-bar').removeClass('progress-bar-striped progress-bar-animated')
                               .css('background', 'linear-gradient(90deg, #46b450, #2e7d32)');
        
        // Cancel-Button zu "Fertig" √§ndern
        $('#scan-cancel').removeClass('button-secondary')
                         .addClass('button-primary')
                         .css({
                             'background': '#46b450',
                             'border-color': '#46b450',
                             'color': 'white'
                         })
                         .text('‚úÖ Fertig');
        
        chunkingScanState.active = false;
        
        // ‚úÖ GE√ÑNDERT: Nur bei Erfolg ohne Fehler automatisch neu laden
        if (stats.imported > 0 && stats.errors === 0) {
            setTimeout(function() {
                updateScanActivity('üîÑ Seite wird in 5 Sekunden neu geladen...');
                setTimeout(function() {
                    location.reload();
                }, 5000); // ‚úÖ L√ÑNGERE WARTEZEIT f√ºr Fehlerprotokoll
            }, 3000);
        } else if (stats.errors > 0) {
            // ‚úÖ NEU: Bei Fehlern NICHT automatisch neu laden
            updateScanActivity('‚ö†Ô∏è Import mit Fehlern abgeschlossen - Seite wird NICHT automatisch neu geladen');
            updateScanActivity('üìã √úberpr√ºfen Sie das Fehlerprotokoll und laden Sie die Seite manuell neu');
        }
    }
    
    /**
     * ‚úÖ NEU: Scanning abbrechen
     */
    function cancelScanning() {
        if (!chunkingScanState.active) {
            // Wenn nicht aktiv, Progress Bar verstecken
            hideProgressBar();
            return;
        }
        
        console.log('üõë FAHRPLANPORTAL: Benutzer bricht Chunked Scanning ab');
        
        chunkingScanState.cancelled = true;
        chunkingScanState.active = false;
        
        // Progress Bar zu Abbruch √§ndern
        $('#scan-progress-bar').removeClass('progress-bar-striped progress-bar-animated')
                               .css('background', 'linear-gradient(90deg, #dc3232, #a02622)');
        
        updateScanActivity('üõë Scanning vom Benutzer abgebrochen');
        
        // Cancel-Button zu "Schlie√üen" √§ndern
        $('#scan-cancel').text('‚ùå Schlie√üen');
        
        // Nach 2 Sekunden Progress Bar verstecken
        setTimeout(hideProgressBar, 2000);
    }
    
    /**
     * ‚úÖ NEU: Progress Bar verstecken
     */
    function hideProgressBar() {
        $('#scan-progress-container').hide();
        $('.fahrplan-controls').show();
        resetScanButton();
    }
    
    /**
     * ‚úÖ NEU: Scan-Button zur√ºcksetzen
     */
    function resetScanButton() {
        $('#scan-directory').prop('disabled', false).text('Verzeichnis scannen');
        $('#scan-status').html('');
    }
    
    /**
     * ‚úÖ NEU: Dauer formatieren
     */
    function formatDuration(seconds) {
        if (seconds < 60) {
            return seconds + ' Sek';
        } else if (seconds < 3600) {
            var minutes = Math.floor(seconds / 60);
            var remainingSeconds = seconds % 60;
            return minutes + ' Min' + (remainingSeconds > 0 ? ' ' + remainingSeconds + ' Sek' : '');
        } else {
            var hours = Math.floor(seconds / 3600);
            var remainingMinutes = Math.floor((seconds % 3600) / 60);
            return hours + ' Std' + (remainingMinutes > 0 ? ' ' + remainingMinutes + ' Min' : '');
        }
    }
    
    // ========================================
    // DATATABLES INITIALISIERUNG (ADMIN)
    // ========================================
    initAdminDataTables();
    
    function initAdminDataTables() {
        if (!$('#fahrplaene-table').length) {
            console.log('FAHRPLANPORTAL: Keine Admin-Tabelle gefunden');
            return;
        }
        
        var hasData = $('#fahrplaene-table tbody tr[data-id]').length > 0;
        
        if (!hasData) {
            console.log('FAHRPLANPORTAL: Keine Daten vorhanden, DataTables √ºbersprungen');
            return;
        }
        
        // Custom Sorting f√ºr deutsches Datumsformat
        $.fn.dataTable.ext.type.order['date-de-pre'] = function(data) {
            if (!data || data === '') return 0;
            
            var parts = data.split('.');
            if (parts.length === 3) {
                return parts[2] + parts[1].padStart(2, '0') + parts[0].padStart(2, '0');
            }
            return 0;
        };
        
        try {
            var tagsColumnIndex = pdfParsingEnabled ? 10 : -1;
            var actionsColumnIndex = pdfParsingEnabled ? 11 : 10;
            
            console.log('FAHRPLANPORTAL: Admin DataTables - Tags-Index:', tagsColumnIndex, 'Aktionen-Index:', actionsColumnIndex);
            
            var datatableConfig = {
                "language": {
                    "url": "//cdn.datatables.net/plug-ins/1.10.24/i18n/German.json"
                },
                "responsive": true,
                "lengthMenu": [ 10, 25, 50, 200, -1 ],
                "pageLength": 200,
                "order": [[ 7, "asc" ]],
                "scrollX": false,
                "columnDefs": [
                    { "orderable": false, "targets": [actionsColumnIndex] },
                    { "width": "50px", "targets": [0] },
                    { "width": "80px", "targets": [1, 2] },
                    { "width": "auto", "targets": [3] },
                    { 
                        "width": "90px", 
                        "targets": [4, 5],
                        "type": "date-de"
                    },
                    { "width": "70px", "targets": [6] },
                    { "width": "100px", "targets": [7] },
                    { "width": "50px", "targets": [8] },
                    { "width": "150px", "targets": [9] },
                    { "width": "120px", "targets": [actionsColumnIndex] }
                ],
                "initComplete": function() {
                    populateAdminRegionFilter();
                    
                    if (pdfParsingEnabled) {
                        addAdminTagTooltips();
                    }
                    
                    console.log('‚úÖ FAHRPLANPORTAL: Admin DataTables initialisiert');
                },
                "drawCallback": function() {
                    if (pdfParsingEnabled) {
                        addAdminTagTooltips();
                    }
                }
            };
            
            // Tags-Spalten-Konfiguration f√ºr Admin
            if (pdfParsingEnabled && tagsColumnIndex >= 0) {
                datatableConfig.columnDefs.push({
                    "width": "200px", 
                    "targets": [tagsColumnIndex],
                    "orderable": true,
                    "searchable": true,
                    "render": function(data, type, row) {
                        if (type === 'display') {
                            return data;
                        }
                        // FIX: Verwende jQuery-Objekt mit HTML-String korrekt
                        try {
                            var tempDiv = document.createElement('div');
                            tempDiv.innerHTML = data;
                            return tempDiv.textContent || tempDiv.innerText || '';
                        } catch(e) {
                            return data;
                        }
                    }
                });
            }
            
            var fahrplaeneTable = $('#fahrplaene-table').DataTable(datatableConfig);
            
            setupAdminRegionFilter(fahrplaeneTable);
            
        } catch (error) {
            console.error('FAHRPLANPORTAL: Admin DataTables Fehler:', error);
        }
    }
    
    function addAdminTagTooltips() {
        if (!pdfParsingEnabled) return;
        
        $('.simple-tags').each(function() {
            var $tag = $(this);
            // FIX: Sichere Text-Extraktion ohne jQuery-Parser
            var tagText = (this.textContent || this.innerText || '').trim();
            
            if (this.scrollWidth > this.clientWidth) {
                $tag.attr('title', tagText);
            }
        });
    }
    
    function populateAdminRegionFilter() {
        var regions = new Set();
        var regionFilter = $('#region-filter');
        
        $('#fahrplaene-table tbody tr').each(function() {
            var regionCell = $(this).find('td:nth-child(8)');
            var regionText = '';
            
            // FIX: Sichere Text-Extraktion
            if (regionCell.length > 0) {
                regionText = regionCell[0].textContent || regionCell[0].innerText || '';
                regionText = regionText.trim();
            }
            
            if (regionText && regionText !== '') {
                regions.add(regionText);
            }
        });
        
        var sortedRegions = Array.from(regions).sort();
        regionFilter.find('option:not(:first)').remove();
        
        sortedRegions.forEach(function(region) {
            regionFilter.append('<option value="' + region + '">' + region + '</option>');
        });
        
        console.log('‚úÖ FAHRPLANPORTAL: Admin Region-Filter gef√ºllt mit:', sortedRegions);
    }
    
    function setupAdminRegionFilter(fahrplaeneTable) {
        $.fn.dataTable.ext.search.push(function(settings, data, dataIndex) {
            var selectedRegion = $('#region-filter').val();
            var regionColumn = data[7];
            
            if (!selectedRegion || selectedRegion === '') {
                return true;
            }
            
            return regionColumn === selectedRegion;
        });
        
        $('#region-filter').on('change', function() {
            var selectedRegion = $(this).val();
            console.log('FAHRPLANPORTAL: Admin Region-Filter ge√§ndert zu:', selectedRegion);
            
            if (fahrplaeneTable) {
                fahrplaeneTable.draw();
            }
            
            updateAdminFilterStatus(selectedRegion, fahrplaeneTable);
        });
        
        $('#clear-filter').on('click', function() {
            $('#region-filter').val('');
            if (fahrplaeneTable) {
                fahrplaeneTable.draw();
            }
            updateAdminFilterStatus('', fahrplaeneTable);
            console.log('FAHRPLANPORTAL: Admin Region-Filter zur√ºckgesetzt');
        });
    }
    
    function updateAdminFilterStatus(selectedRegion, fahrplaeneTable) {
        var statusText = '';
        if (selectedRegion) {
            var filteredCount = fahrplaeneTable ? fahrplaeneTable.rows({search: 'applied'}).count() : 0;
            statusText = ' (gefiltert nach: ' + selectedRegion + ' - ' + filteredCount + ' Eintr√§ge)';
        }
        
        $('#filter-status').remove();
        $('.dataTables_info').append('<span id="filter-status">' + statusText + '</span>');
    }
    
    // ========================================
    // ADMIN SCAN-FUNKTIONALIT√ÑT (ERWEITERT)
    // ========================================
    $('#scan-directory').on('click', function() {
        console.log('FAHRPLANPORTAL: Admin Scan-Button geklickt');
        
        // ‚úÖ ERWEITERT: Chunked Scanning mit DB-Bereinigung verwenden
        startChunkedScanning();
    });
    
    // ‚úÖ NEU: Cancel-Button f√ºr Chunked Scanning
    $('#scan-cancel').on('click', function() {
        console.log('FAHRPLANPORTAL: Cancel-Button geklickt');
        cancelScanning();
    });
    
    // ========================================
    // ADMIN MODAL-FUNKTIONALIT√ÑT
    // ========================================
    function openAdminEditModal(fahrplanId) {
        console.log('FAHRPLANPORTAL: √ñffne Admin Modal f√ºr ID:', fahrplanId);
        
        $('#fahrplan-edit-modal').fadeIn(300);
        
        fahrplanAdminCall('get_fahrplan', {id: fahrplanId}, {
            success: function(fahrplan) {
                $('#edit-id').val(fahrplan.id);
                $('#edit-titel').val(fahrplan.titel);
                $('#edit-linie-alt').val(fahrplan.linie_alt);
                $('#edit-linie-neu').val(fahrplan.linie_neu);
                $('#edit-kurzbeschreibung').val(fahrplan.kurzbeschreibung);
                $('#edit-gueltig-von').val(fahrplan.gueltig_von);
                $('#edit-gueltig-bis').val(fahrplan.gueltig_bis);
                $('#edit-region').val(fahrplan.region);
                
                if (pdfParsingEnabled && $('#edit-tags').length) {
                    $('#edit-tags').val(fahrplan.tags || '');
                }
                
                setTimeout(function() {
                    $('#edit-titel').focus();
                }, 100);
                
                console.log('FAHRPLANPORTAL: Admin Modal-Daten geladen');
            },
            error: function(error) {
                console.error('FAHRPLANPORTAL: Admin Fehler beim Laden:', error);
                alert('Admin Fehler beim Laden der Fahrplan-Daten: ' + error.message);
                closeAdminEditModal();
            }
        });
    }
    
    function closeAdminEditModal() {
        $('#fahrplan-edit-modal').fadeOut(300);
        $('#fahrplan-edit-form')[0].reset();
        $('#edit-id').val('');
        console.log('FAHRPLANPORTAL: Admin Modal geschlossen');
    }
    
    function saveAdminModalChanges() {
        var id = $('#edit-id').val();
        var saveButton = $('#save-edit-btn');
        
        if (!id) {
            alert('Admin Fehler: Keine ID gefunden');
            return;
        }
        
        saveButton.prop('disabled', true).text('Speichern...');
        
        var formData = {
            id: id,
            titel: $('#edit-titel').val(),
            linie_alt: $('#edit-linie-alt').val(),
            linie_neu: $('#edit-linie-neu').val(),
            kurzbeschreibung: $('#edit-kurzbeschreibung').val(),
            gueltig_von: $('#edit-gueltig-von').val(),
            gueltig_bis: $('#edit-gueltig-bis').val(),
            region: $('#edit-region').val()
        };
        
        if (pdfParsingEnabled && $('#edit-tags').length) {
            formData.tags = $('#edit-tags').val();
        }
        
        console.log('FAHRPLANPORTAL: Admin speichere √Ñnderungen f√ºr ID:', id);
        
        fahrplanAdminCall('update_fahrplan', formData, {
            success: function(response) {
                console.log('FAHRPLANPORTAL: Admin Speichern erfolgreich');
                
                saveButton.text('‚úì Gespeichert').addClass('success');
                
                setTimeout(function() {
                    closeAdminEditModal();
                    location.reload();
                }, 1000);
            },
            error: function(error) {
                console.error('FAHRPLANPORTAL: Admin Speichern fehlgeschlagen:', error);
                alert('Admin Fehler beim Speichern: ' + error.message);
                saveButton.prop('disabled', false).text('Speichern');
            }
        });
    }
    
    
    // ========================================
    // ‚úÖ TAG-ANALYSE EVENT-HANDLER (GEFIXT)
    // ========================================
    $('#analyze-all-tags').on('click', function() {
        var $btn = $(this);
        var $status = $('#tag-analysis-status');
        
        // Button deaktivieren und Status anzeigen
        $btn.prop('disabled', true).html(
            '<span class="dashicons dashicons-update-alt" style="animation: spin 1s linear infinite; vertical-align: middle; margin-right: 5px;"></span>' +
            'Analysiere Tags...'
        );
        $status.html('<span style="color: orange;">üîÑ Sammle alle Tags aus der Datenbank...</span>');
        
        // Ergebnisse-Container verstecken
        $('#tag-analysis-results').hide();
        
        console.log('üîç FAHRPLANPORTAL: Starte Tag-Analyse');
        
        fahrplanAdminCall('analyze_all_tags', {}, {
            success: function(response) {
                console.log('‚úÖ FAHRPLANPORTAL: Tag-Analyse erfolgreich:', response);
                
                // Button zur√ºcksetzen
                $btn.prop('disabled', false).html(
                    '<span class="dashicons dashicons-search" style="vertical-align: middle; margin-right: 5px;"></span>' +
                    'Alle Tags analysieren'
                );
                
                // ‚úÖ GEFIXT: Response ist bereits im korrekten Format
                if (!response || (!response.statistics && !response.analysis)) {
                    console.error('‚ùå FAHRPLANPORTAL: Ung√ºltige Response-Struktur:', response);
                    $status.html('<span style="color: red;">‚ùå Fehler: Ung√ºltige Datenstruktur</span>');
                    return;
                }
                
                // Erfolgs-Status anzeigen
                var totalTags = (response.statistics && response.statistics.total_unique_tags) || 0;
                $status.html('<span style="color: green;">‚úÖ Analyse abgeschlossen (' + totalTags + ' eindeutige Tags)</span>');
                
                // ‚úÖ GEFIXT: Direkt response √ºbergeben, NICHT in data wrappen
                displayTagAnalysisResults({ data: response });
                
                // Nach 5 Sekunden Status leeren
                setTimeout(function() {
                    $status.html('');
                }, 5000);
            },
            error: function(error) {
                console.error('‚ùå FAHRPLANPORTAL: Tag-Analyse fehlgeschlagen:', error);
                
                // Button zur√ºcksetzen
                $btn.prop('disabled', false).html(
                    '<span class="dashicons dashicons-search" style="vertical-align: middle; margin-right: 5px;"></span>' +
                    'Alle Tags analysieren'
                );
                
                // Detaillierte Fehlerbehandlung
                var errorMessage = 'Unbekannter Fehler';
                if (error && error.message) {
                    errorMessage = error.message;
                } else if (typeof error === 'string') {
                    errorMessage = error;
                }
                
                // Fehler-Status anzeigen
                $status.html('<span style="color: red;">‚ùå Fehler: ' + errorMessage + '</span>');
                
                // Benutzerfreundliche Fehlermeldung
                alert('Fehler bei der Tag-Analyse:\n\n' + errorMessage + '\n\nPr√ºfen Sie die Browser-Konsole f√ºr weitere Details.');
            }
        });
    });

    // ========================================
    // ‚úÖ GE√ÑNDERT: ADMIN EVENT-HANDLER - LINIE NEU EDITIERBAR
    // ========================================
    
    // Bearbeiten-Button in Admin-Tabelle
    $('#fahrplaene-table').on('click', '.edit-fahrplan', function() {
        var fahrplanId = $(this).data('id');
        openAdminEditModal(fahrplanId);
    });
    
    // ‚úÖ GE√ÑNDERT: Klickbare Linie NEU (Spalte 3) statt Linie ALT (Spalte 2) in Admin
    $('#fahrplaene-table').on('click', 'td:nth-child(3)', function() {
        var lineText = $(this).text().trim();
        if (lineText && lineText !== '') {
            var fahrplanId = $(this).closest('tr').data('id');
            
            if (fahrplanId) {
                console.log('FAHRPLANPORTAL: Admin Linie NEU geklickt - ID:', fahrplanId, 'Linie:', lineText);
                openAdminEditModal(fahrplanId);
            } else {
                console.warn('FAHRPLANPORTAL: Admin - Keine ID in Tabellenzeile gefunden');
            }
        }
    });
    
    // ‚úÖ GE√ÑNDERT: Hover-Effekt f√ºr Linie NEU (Spalte 3) statt Linie ALT (Spalte 2) in Admin
    $('#fahrplaene-table').on('mouseenter', 'td:nth-child(3)', function() {
        var lineText = $(this).text().trim();
        if (lineText && lineText !== '') {
            $(this).attr('title', 'Klicken um Fahrplan zu bearbeiten');
            $(this).css('cursor', 'pointer');
        }
    });
    
    // ‚úÖ NEU: Linie ALT (Spalte 2) nicht mehr klickbar - normaler Cursor
    $('#fahrplaene-table').on('mouseenter', 'td:nth-child(2)', function() {
        $(this).css('cursor', 'default');
        $(this).removeAttr('title');
    });
    
    // Admin Modal Event-Handler
    $('#close-modal-btn').on('click', function() {
        closeAdminEditModal();
    });
    
    $('#cancel-edit-btn').on('click', function() {
        closeAdminEditModal();
    });
    
    $('#save-edit-btn').on('click', function() {
        saveAdminModalChanges();
    });
    
    $('#fahrplan-edit-modal').on('click', function(e) {
        if (e.target === this) {
            closeAdminEditModal();
        }
    });
    
    $(document).on('keydown', function(e) {
        if (e.key === 'Escape') {
            if ($('#fahrplan-edit-modal').is(':visible')) {
                closeAdminEditModal();
            } else if (chunkingScanState.active) {
                // ESC-Taste auch f√ºr Scan-Abbruch
                cancelScanning();
            }
        }
    });
    
    // Admin Fahrplan l√∂schen
    $('#fahrplaene-table').on('click', '.delete-fahrplan', function() {
        if (!confirm('Admin: Fahrplan wirklich l√∂schen?')) {
            return;
        }
        
        var row = $(this).closest('tr');
        var id = $(this).data('id');
        
                        fahrplanAdminCall('delete_fahrplan', {id: id}, {
            success: function(response) {
                var fahrplaeneTable = $('#fahrplaene-table').DataTable();
                if (fahrplaeneTable) {
                    fahrplaeneTable.row(row).remove().draw();
                } else {
                    row.remove();
                }
                console.log('FAHRPLANPORTAL: Admin Fahrplan gel√∂scht, ID:', id);
            },
            error: function(error) {
                alert('Admin Fehler beim L√∂schen: ' + error.message);
            }
        });
    });
    
    // ========================================
    // ADMIN DB-WARTUNG FUNKTIONALIT√ÑT
    // ========================================
    
    // Standard-Exklusionsliste
    var defaultExclusions = 'aber alle allem allen aller alles also auch auf aus bei bin bis bist dass den der des die dies doch dort durch ein eine einem einen einer eines f√ºr hab hat hier ich ihr ihre ihrem ihren ihrer ihres ist mit nach nicht noch nur oder sich sie sind √ºber und uns von war wird wir zu zum zur wie was wo wer wann warum welche welcher welches wenn schon noch sehr mehr weniger gro√ü klein gut schlecht neu alt lang kurz hoch niedrig\n\nfahrplan fahrpl√§ne fahrt fahrten zug z√ºge bus busse bahn bahnen haltestelle haltestellen bahnhof bahnh√∂fe station stationen linie linien route routen verkehr abfahrt abfahrten ankunft ank√ºnfte uhrzeit uhrzeiten\n\nmontag dienstag mittwoch donnerstag freitag samstag sonntag wochentag wochentage wochenende\n\nheute gestern morgen √ºbermorgen vorgestern t√§glich w√∂chentlich monatlich j√§hrlich\n\njahr jahre jahren zeit zeiten mal male heute gestern morgen immer nie oft selten manchmal immer wieder\n\nauto autos wagen fahrzeug fahrzeuge transport transporte reise reisen weg wege stra√üe stra√üen';
    
    // Beispiel-Mapping
    var exampleMapping = '// Beispiel Linien-Mapping: linie_alt:linie_neu\n// K√§rnten Linien Beispiele:\n5000:100\n5001:101\n5002:102\n5003:103\n5004:104\n5005:105\n5006:106\n5007:107\n5008:108\n5009:109\n5010:110\n\n// Regionale Linien:\n5020:120\n5021:121\n5022:122\n5025:125\n\n// Stadtlinien:\n5100:200\n5101:201\n5102:202\n\n// Weitere Zuordnungen:\n5402:502\n5403:503\n5404:504';
    
    // Admin Exklusionsliste speichern
    $('#save-exclusion-words').on('click', function() {
        var $btn = $(this);
        var $status = $('#exclusion-status');
        var exclusionText = $('#exclusion-words').val();
        
        $btn.prop('disabled', true);
        $status.html('<span style="color: orange;">Admin speichert...</span>');
        
        fahrplanAdminCall('save_exclusion_words', {exclusion_words: exclusionText}, {
            success: function(response) {
                $status.html('<span style="color: green;">‚úì Admin gespeichert (' + response.word_count + ' W√∂rter)</span>');
                setTimeout(function() {
                    $status.html('');
                }, 3000);
            },
            error: function(error) {
                $status.html('<span style="color: red;">‚úó Admin Fehler: ' + error.message + '</span>');
            },
            complete: function() {
                $btn.prop('disabled', false);
            }
        });
    });
    
    // Admin Exklusionsliste laden
    $('#load-exclusion-words').on('click', function() {
        var $btn = $(this);
        var $status = $('#exclusion-status');
        
        $btn.prop('disabled', true);
        $status.html('<span style="color: orange;">Admin l√§dt...</span>');
        
        fahrplanAdminCall('load_exclusion_words', {}, {
            success: function(response) {
                $('#exclusion-words').val(response.exclusion_words);
                $status.html('<span style="color: green;">‚úì Admin geladen (' + response.word_count + ' W√∂rter)</span>');
                setTimeout(function() {
                    $status.html('');
                }, 3000);
            },
            error: function(error) {
                $status.html('<span style="color: red;">‚úó Admin Fehler: ' + error.message + '</span>');
            },
            complete: function() {
                $btn.prop('disabled', false);
            }
        });
    });
    
    // Standard-Exklusionsliste laden
    $('#load-default-exclusions').on('click', function() {
        var currentText = $('#exclusion-words').val();
        var newText = currentText.trim();
        
        if (newText.length > 0) {
            newText += '\n\n';
        }
        newText += defaultExclusions;
        
        $('#exclusion-words').val(newText);
        
        $('#exclusion-status').html('<span style="color: blue;">‚Ñπ Admin Standard-W√∂rter hinzugef√ºgt. Klicken Sie "Speichern" um zu √ºbernehmen.</span>');
        setTimeout(function() {
            $('#exclusion-status').html('');
        }, 5000);
    });
    
    // Admin Linien-Mapping speichern
    $('#save-line-mapping').on('click', function() {
        var $btn = $(this);
        var $status = $('#mapping-status');
        var mappingText = $('#line-mapping').val();
        
        $btn.prop('disabled', true);
        $status.html('<span style="color: orange;">Admin speichert...</span>');
        
        fahrplanAdminCall('save_line_mapping', {line_mapping: mappingText}, {
            success: function(response) {
                $status.html('<span style="color: green;">‚úì Admin gespeichert (' + response.mapping_count + ' Zuordnungen)</span>');
                setTimeout(function() {
                    $status.html('');
                }, 3000);
            },
            error: function(error) {
                $status.html('<span style="color: red;">‚úó Admin Fehler: ' + error.message + '</span>');
            },
            complete: function() {
                $btn.prop('disabled', false);
            }
        });
    });
    
    // Admin Linien-Mapping laden
    $('#load-line-mapping').on('click', function() {
        var $btn = $(this);
        var $status = $('#mapping-status');
        
        $btn.prop('disabled', true);
        $status.html('<span style="color: orange;">Admin l√§dt...</span>');
        
        fahrplanAdminCall('load_line_mapping', {}, {
            success: function(response) {
                $('#line-mapping').val(response.line_mapping);
                $status.html('<span style="color: green;">‚úì Admin geladen (' + response.mapping_count + ' Zuordnungen)</span>');
                setTimeout(function() {
                    $status.html('');
                }, 3000);
            },
            error: function(error) {
                $status.html('<span style="color: red;">‚úó Admin Fehler: ' + error.message + '</span>');
            },
            complete: function() {
                $btn.prop('disabled', false);
            }
        });
    });
    
    // Beispiel-Mapping laden
    $('#load-example-mapping').on('click', function() {
        var currentText = $('#line-mapping').val();
        var newText = currentText.trim();
        
        if (newText.length > 0) {
            newText += '\n\n';
        }
        newText += exampleMapping;
        
        $('#line-mapping').val(newText);
        
        $('#mapping-status').html('<span style="color: blue;">‚Ñπ Admin Beispiel-Zuordnungen hinzugef√ºgt. Klicken Sie "Speichern" um zu √ºbernehmen.</span>');
        setTimeout(function() {
            $('#mapping-status').html('');
        }, 5000);
    });
    
    // Admin DB-Wartung Buttons
    $('#recreate-db').on('click', function() {
        if (!confirm('Admin: Wirklich die komplette Datenbank neu erstellen? Alle Daten gehen verloren!')) {
            return;
        }
        
        fahrplanAdminCall('recreate_db', {}, {
            success: function(response) {
                alert('Admin: Datenbank erfolgreich neu erstellt');
                location.reload();
            },
            error: function(error) {
                alert('Admin Fehler: ' + error.message);
            }
        });
    });
    
    $('#clear-db').on('click', function() {
        if (!confirm('Admin: Wirklich alle Fahrpl√§ne l√∂schen?')) {
            return;
        }
        
        fahrplanAdminCall('clear_db', {}, {
            success: function(response) {
                alert('Admin: Alle Fahrpl√§ne erfolgreich gel√∂scht');
                location.reload();
            },
            error: function(error) {
                alert('Admin Fehler: ' + error.message);
            }
        });
    });

    /**
     * ‚úÖ NEU: Fehlerprotokoll sammeln
     */
    function collectErrorSummary() {
        console.log('üìä FAHRPLANPORTAL: Sammle Fehlerprotokoll:', chunkingScanState.errorDetails);
        
        var errorSummary = {
            totalErrors: chunkingScanState.errorDetails.length,
            errorDetails: chunkingScanState.errorDetails,
            errorsByRegion: chunkingScanState.errorsByRegion,
            errorsByType: chunkingScanState.errorsByType
        };
        
        // Fallback: Falls keine detaillierten Fehler, aber Fehler-Counter > 0
        if (errorSummary.totalErrors === 0 && chunkingScanState.totalStats.errors > 0) {
            console.warn('‚ö†Ô∏è FAHRPLANPORTAL: Fehler-Counter zeigt Fehler, aber keine Details gesammelt');
            
            // Generische Fehler-Eintr√§ge erstellen
            for (var i = 0; i < chunkingScanState.totalStats.errors; i++) {
                errorSummary.errorDetails.push({
                    timestamp: new Date().toISOString(),
                    file: 'Unbekannte Datei #' + (i + 1),
                    error: 'Fehler beim Verarbeiten (Details nicht verf√ºgbar)',
                    region: 'Unbekannte Region',
                    chunk: 'Unbekannt'
                });
            }
            
            errorSummary.totalErrors = chunkingScanState.totalStats.errors;
            errorSummary.errorsByType['Unbekannte Fehler'] = chunkingScanState.totalStats.errors;
            errorSummary.errorsByRegion['Unbekannte Region'] = chunkingScanState.totalStats.errors;
        }
        
        console.log('üìã FAHRPLANPORTAL: Finales Fehlerprotokoll:', errorSummary);
        return errorSummary;
    }

    /**
     * ‚úÖ NEU: Fehlerprotokoll-Dialog anzeigen
     */
    function showErrorProtocol(errorSummary) {
        console.log('üö® FAHRPLANPORTAL: Zeige Fehlerprotokoll an:', errorSummary);
        
        // Sicherstellen dass wir Daten haben
        if (!errorSummary.errorDetails || errorSummary.errorDetails.length === 0) {
            console.warn('‚ö†Ô∏è FAHRPLANPORTAL: Keine Fehler-Details zum Anzeigen');
            return;
        }
        
        var errorTypesHtml = '';
        if (Object.keys(errorSummary.errorsByType).length > 0) {
            errorTypesHtml = Object.entries(errorSummary.errorsByType)
                .map(([type, count]) => `<li><strong>${type}:</strong> ${count}</li>`)
                .join('');
        } else {
            errorTypesHtml = '<li>Keine Kategorisierung verf√ºgbar</li>';
        }
        
        var errorRegionsHtml = '';
        if (Object.keys(errorSummary.errorsByRegion).length > 0) {
            errorRegionsHtml = Object.entries(errorSummary.errorsByRegion)
                .map(([region, count]) => `<li><strong>${region}:</strong> ${count}</li>`)
                .join('');
        } else {
            errorRegionsHtml = '<li>Keine Regions-Zuordnung verf√ºgbar</li>';
        }
        
        var errorDetailsHtml = '';
        if (errorSummary.errorDetails.length > 0) {
            errorDetailsHtml = errorSummary.errorDetails
                .map((error, index) => `
                    <div style="
                        padding: 10px 15px;
                        border-bottom: 1px solid #e9ecef;
                        ${index % 2 === 0 ? 'background: white;' : 'background: #f8f9fa;'}
                    ">
                        <div style="margin-bottom: 5px;">
                            <strong style="color: #dc3545;">üìÑ Datei:</strong> 
                            <span style="font-family: monospace; background: #f1f3f4; padding: 2px 4px; border-radius: 3px;">
                                ${error.file || 'Unbekannte Datei'}
                            </span>
                        </div>
                        <div style="margin-bottom: 5px;">
                            <strong style="color: #856404;">‚ö†Ô∏è Fehler:</strong> 
                            <span style="color: #721c24;">${error.error || 'Unbekannter Fehler'}</span>
                        </div>
                        ${error.region ? `
                            <div style="margin-bottom: 5px;">
                                <strong style="color: #0c5460;">üó∫Ô∏è Region:</strong> 
                                <span style="color: #155724;">${error.region}</span>
                            </div>
                        ` : ''}
                        ${error.timestamp ? `
                            <div style="font-size: 11px; color: #6c757d;">
                                üïí ${new Date(error.timestamp).toLocaleString('de-DE')}
                            </div>
                        ` : ''}
                    </div>
                `)
                .join('');
        } else {
            errorDetailsHtml = '<div style="padding: 20px; text-align: center; color: #6c757d;">Keine detaillierten Fehlerinformationen verf√ºgbar</div>';
        }
        
        var errorDialogHtml = `
            <div id="error-protocol-dialog" style="
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.8);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 1000000;
                animation: fadeIn 0.3s ease;
            ">
                <div style="
                    background: white;
                    border-radius: 12px;
                    box-shadow: 0 25px 80px rgba(0, 0, 0, 0.4);
                    max-width: 900px;
                    width: 95%;
                    max-height: 90vh;
                    overflow: hidden;
                    animation: slideIn 0.4s ease;
                    border: 3px solid #dc3545;
                ">
                    <!-- Header -->
                    <div style="
                        background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
                        color: white;
                        padding: 20px 25px;
                        text-align: center;
                    ">
                        <div style="font-size: 42px; margin-bottom: 10px;">‚ö†Ô∏è</div>
                        <h2 style="margin: 0; font-size: 20px; font-weight: 600;">
                            Import-Fehlerprotokoll
                        </h2>
                        <p style="margin: 5px 0 0 0; opacity: 0.9; font-size: 14px;">
                            ${errorSummary.totalErrors} Fehler beim PDF-Import aufgetreten
                        </p>
                    </div>
                    
                    <!-- Body -->
                    <div style="padding: 25px; max-height: 60vh; overflow-y: auto;">
                        <!-- Fehler-Statistik -->
                        <div style="
                            background: #fff3cd;
                            border: 2px solid #ffc107;
                            border-radius: 8px;
                            padding: 15px;
                            margin-bottom: 20px;
                        ">
                            <h4 style="margin: 0 0 15px 0; color: #856404;">üìä Fehler-√úbersicht:</h4>
                            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                                <div>
                                    <strong style="color: #856404; display: block; margin-bottom: 8px;">Nach Fehlertyp:</strong>
                                    <ul style="margin: 0; padding-left: 20px; color: #856404; line-height: 1.4;">
                                        ${errorTypesHtml}
                                    </ul>
                                </div>
                                <div>
                                    <strong style="color: #856404; display: block; margin-bottom: 8px;">Nach Region:</strong>
                                    <ul style="margin: 0; padding-left: 20px; color: #856404; line-height: 1.4;">
                                        ${errorRegionsHtml}
                                    </ul>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Detaillierte Fehlerliste -->
                        <h4 style="margin: 0 0 15px 0; color: #dc3545;">üîç Detaillierte Fehlerliste:</h4>
                        <div style="
                            background: #f8f9fa;
                            border: 2px solid #dee2e6;
                            border-radius: 8px;
                            max-height: 350px;
                            overflow-y: auto;
                            font-size: 13px;
                            line-height: 1.4;
                        ">
                            ${errorDetailsHtml}
                        </div>
                        
                        <!-- Hilfetext -->
                        <div style="
                            background: #e3f2fd;
                            border: 2px solid #2196f3;
                            border-radius: 8px;
                            padding: 15px;
                            margin-top: 20px;
                        ">
                            <h5 style="margin: 0 0 10px 0; color: #1565c0;">üí° N√§chste Schritte:</h5>
                            <ul style="margin: 0; padding-left: 20px; color: #1565c0; line-height: 1.5;">
                                <li>√úberpr√ºfen Sie die fehlerhaften PDF-Dateien</li>
                                <li>Korrigieren Sie Dateinamen falls n√∂tig</li>
                                <li>Pr√ºfen Sie die Linien-Mapping Konfiguration</li>
                                <li>F√ºhren Sie den Import erneut aus</li>
                            </ul>
                        </div>
                    </div>
                    
                    <!-- Footer -->
                    <div style="
                        padding: 20px 25px;
                        background: #f8f9fa;
                        border-top: 1px solid #dee2e6;
                        text-align: center;
                    ">
                        <button id="close-error-protocol" style="
                            background: #007bff;
                            color: white;
                            border: none;
                            padding: 12px 25px;
                            border-radius: 6px;
                            font-size: 14px;
                            font-weight: 600;
                            cursor: pointer;
                            min-width: 120px;
                            transition: all 0.2s ease;
                        ">
                            ‚úÖ Verstanden
                        </button>
                    </div>
                </div>
            </div>
            
            <style>
            @keyframes fadeIn {
                from { opacity: 0; }
                to { opacity: 1; }
            }
            @keyframes slideIn {
                from { 
                    opacity: 0; 
                    transform: translateY(-50px) scale(0.9); 
                }
                to { 
                    opacity: 1; 
                    transform: translateY(0) scale(1); 
                }
            }
            #close-error-protocol:hover {
                background: #0056b3 !important;
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0, 123, 255, 0.3);
            }
            </style>
        `;
        
        // Dialog zum Body hinzuf√ºgen
        $('body').append(errorDialogHtml);
        
        // Close-Handler
        $('#close-error-protocol').on('click', function() {
            $('#error-protocol-dialog').fadeOut(300, function() {
                $(this).remove();
            });
        });
        
        // ESC-Taste
        $(document).on('keydown.error-protocol', function(e) {
            if (e.key === 'Escape') {
                $('#close-error-protocol').click();
                $(document).off('keydown.error-protocol');
            }
        });
    }

    // Bei Scan-Start Fehlersammlung zur√ºcksetzen
    function resetErrorCollection() {
        chunkingScanState.errorDetails = [];
        chunkingScanState.errorsByType = {};
        chunkingScanState.errorsByRegion = {};
        chunkingScanState.currentChunkErrors = [];
        
        console.log('üîÑ FAHRPLANPORTAL: Fehlersammlung zur√ºckgesetzt');
    }
    
    // ‚úÖ NEU: CSS f√ºr Editierbarkeit
    $('<style>')
        .prop('type', 'text/css')
        .html(`
            /* Linie NEU editierbar - Hover-Effekt */
            #fahrplaene-table tbody td:nth-child(3) {
                cursor: pointer !important;
                transition: background-color 0.2s ease;
            }
            
            #fahrplaene-table tbody td:nth-child(3):hover {
                background-color: #e3f2fd !important;
                color: #1565c0 !important;
            }
            
            /* Linie ALT nicht editierbar - normaler Stil */
            #fahrplaene-table tbody td:nth-child(2) {
                cursor: default !important;
                color: #666 !important;
            }
            
            #fahrplaene-table tbody td:nth-child(2):hover {
                background-color: inherit !important;
                color: #666 !important;
            }
        `)
        .appendTo('head');
    
    console.log('‚úÖ FAHRPLANPORTAL: Admin-Interface vollst√§ndig initialisiert (Chunked Scanning mit DB-Bereinigung + Linie NEU editierbar)');


    /**
     * ‚úÖ HAUPTFUNKTION: Tag-Analyse Ergebnisse anzeigen (KOMPLETT GEFIXT)
     */
    function displayTagAnalysisResults(response) {
        console.log('üìä FAHRPLANPORTAL: Zeige Tag-Analyse Ergebnisse an:', response);
        
        // ‚úÖ KRITISCHER FIX: Korrekte Datenstruktur pr√ºfen
        if (!response || !response.data) {
            console.error('‚ùå FAHRPLANPORTAL: Ung√ºltige Response-Struktur:', response);
            return;
        }
        
        var data = response.data;
        
        // ‚úÖ GEFIXT: Sichere Navigation zur statistics und analysis
        var stats = data.statistics || {};
        var analysis = data.analysis || {};
        
        console.log('üìä FAHRPLANPORTAL: Extrahierte Stats:', stats);
        console.log('üìä FAHRPLANPORTAL: Extrahierte Analysis:', analysis);
        
        // ‚úÖ Container anzeigen
        $('#tag-analysis-results').show();
        
        // ‚úÖ Statistiken f√ºllen (mit Fallback-Werten)
        var totalFahrplaene = stats.total_fahrplaene || 0;
        var totalUniqueTags = stats.total_unique_tags || 0;
        var excludedCount = stats.excluded_count || 0;
        var notExcludedCount = stats.not_excluded_count || 0;
        var exclusionPercentage = stats.exclusion_percentage || 0;
        var exclusionListSize = stats.exclusion_list_size || 0;
        var processingTime = data.processing_time || 0;
        
        var statsHtml = `
            <div style="text-align: center;">
                <strong style="font-size: 18px; color: #856404;">
                    üìä ${totalUniqueTags} eindeutige Tags aus ${totalFahrplaene} Fahrpl√§nen
                </strong>
            </div>
            <div style="margin-top: 15px; display: grid; grid-template-columns: repeat(2, 1fr); gap: 15px;">
                <div style="text-align: center;">
                    <div style="font-size: 24px; font-weight: bold; color: #28a745;">
                        ${excludedCount}
                    </div>
                    <div style="font-size: 12px; color: #856404;">
                        Bereits ausgeschlossen (${exclusionPercentage}%)
                    </div>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 24px; font-weight: bold; color: #dc3545;">
                        ${notExcludedCount}
                    </div>
                    <div style="font-size: 12px; color: #856404;">
                        Noch nicht ausgeschlossen
                    </div>
                </div>
            </div>
            <div style="margin-top: 15px; text-align: center; font-size: 12px; color: #6c757d;">
                Exklusionsliste: ${exclusionListSize} W√∂rter | 
                Verarbeitung: ${Math.round(processingTime * 1000)}ms
            </div>
        `;
        $('#tag-stats-content').html(statsHtml);
        
        // ‚úÖ Bereits ausgeschlossene Tags (GR√úN) - aus analysis.excluded_tags
        var excludedHtml = '';
        var excludedTags = analysis.excluded_tags || [];
        var excludedTagsTotal = analysis.excluded_tags_total || excludedTags.length;
        
        if (excludedTags && excludedTags.length > 0) {
            // Einfache kommagetrennte Liste
            excludedHtml = '<div style="padding: 5px; line-height: 1.6; word-wrap: break-word;">' + 
                excludedTags.map(function(tag) {
                    return escapeHtml(tag);
                }).join(', ') + '</div>';
        } else if (excludedTagsTotal === 0) {
            excludedHtml = '<div style="text-align: center; color: #666; font-style: italic;">Keine Tags in der Exklusionsliste gefunden</div>';
        }
        $('#excluded-tags-list').html(excludedHtml);
        $('#excluded-tags-count').text(excludedTagsTotal);
        
        // ‚úÖ Noch nicht ausgeschlossene Tags (ROT) - aus analysis.not_excluded_tags
        var notExcludedHtml = '';
        var notExcludedTags = analysis.not_excluded_tags || [];
        var notExcludedTagsTotal = analysis.not_excluded_tags_total || notExcludedTags.length;
        
        if (notExcludedTags && notExcludedTags.length > 0) {
            // Einfache kommagetrennte Liste
            notExcludedHtml = '<div style="padding: 5px; line-height: 1.6; word-wrap: break-word;">' + 
                notExcludedTags.map(function(tag) {
                    return escapeHtml(tag);
                }).join(', ') + '</div>';
        } else if (notExcludedTagsTotal === 0) {
            notExcludedHtml = '<div style="text-align: center; color: #666; font-style: italic;">Alle Tags sind bereits ausgeschlossen! üéâ</div>';
        }
        $('#not-excluded-tags-list').html(notExcludedHtml);
        $('#not-excluded-tags-count').text(notExcludedTagsTotal);
        
        // ‚úÖ Variablen f√ºr Event-Handler verf√ºgbar machen
        var _notExcludedTags = notExcludedTags;
        var _notExcludedTagsTotal = notExcludedTagsTotal;
        
        // ‚úÖ Zus√§tzliche Analysen vorbereiten (mit sicherer Pr√ºfung)
        if (analysis && analysis.top_frequent_tags) {
            // Top h√§ufige Tags
            var frequentHtml = '';
            var counter = 1;
            for (var tag in analysis.top_frequent_tags) {
                var count = analysis.top_frequent_tags[tag];
                frequentHtml += `<div>${counter}. <strong>${escapeHtml(tag)}</strong> (${count}x)</div>`;
                counter++;
            }
            $('#frequent-tags-list').html(frequentHtml || '<div>Keine h√§ufigen Tags gefunden</div>');
            
            // Kurze Tags
            var shortTags = analysis.short_tags || [];
            var shortHtml = shortTags.length > 0 ? 
                shortTags.map(tag => '<code>' + escapeHtml(tag) + '</code>').join(', ') : 
                'Keine kurzen Tags gefunden';
            $('#short-tags-list').html(shortHtml);
            
            // Lange Tags  
            var longTags = analysis.long_tags || [];
            var longHtml = longTags.length > 0 ? 
                longTags.map(tag => '<code>' + escapeHtml(tag) + '</code>').join(', ') : 
                'Keine langen Tags gefunden';
            $('#long-tags-list').html(longHtml);
            
            // Event-Handler f√ºr zus√§tzliche Analysen
            $('#show-analysis-extras').off('click').on('click', function() {
                var $extras = $('#tag-analysis-extras');
                if ($extras.is(':visible')) {
                    $extras.hide();
                    $(this).text('üìä Zus√§tzliche Analysen anzeigen');
                } else {
                    $extras.show();
                    $(this).text('üìä Zus√§tzliche Analysen ausblenden');
                }
            });
        }
        
        // ‚úÖ Event-Handler f√ºr Aktions-Buttons
        $('#copy-red-tags').off('click').on('click', function() {
            // Nutze ALLE angezeigten Tags f√ºr die Kopier-Funktion
            if (_notExcludedTags && _notExcludedTags.length > 0) {
                // F√ºr Kopieren nutzen wir Leerzeichen statt Komma als Trenner
                var tagsText = _notExcludedTags.join(', ');
                
                // Versuche in Zwischenablage zu kopieren
                if (navigator.clipboard && navigator.clipboard.writeText) {
                    navigator.clipboard.writeText(tagsText).then(function() {
                        var message = '‚úÖ ' + _notExcludedTags.length + ' rote Tags in Zwischenablage kopiert!';
                        message += '\n\nSie k√∂nnen diese nun in die Exklusionsliste einf√ºgen.';
                        alert(message);
                    }).catch(function(err) {
                        // Fallback
                        promptCopyText(tagsText, _notExcludedTags.length, _notExcludedTagsTotal);
                    });
                } else {
                    // Fallback f√ºr √§ltere Browser
                    promptCopyText(tagsText, _notExcludedTags.length, _notExcludedTagsTotal);
                }
            } else {
                alert('üéâ Keine roten Tags zum Kopieren - alle Tags sind bereits ausgeschlossen!');
            }
        });
        
        console.log('‚úÖ FAHRPLANPORTAL: Tag-Analyse Ergebnisse vollst√§ndig angezeigt');
    }

    // Helper-Funktion f√ºr HTML-Escaping
    function escapeHtml(text) {
        var map = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#039;'
        };
        return text.replace(/[&<>"']/g, function(m) { return map[m]; });
    }

    // Fallback f√ºr Kopieren in Zwischenablage
    function promptCopyText(text, count, totalCount) {
        var textarea = document.createElement('textarea');
        textarea.value = text;
        textarea.style.position = 'fixed';
        textarea.style.opacity = '0';
        document.body.appendChild(textarea);
        textarea.select();
        try {
            document.execCommand('copy');
            var message = '‚úÖ ' + count + ' rote Tags in Zwischenablage kopiert!';
            alert(message);
        } catch (err) {
            prompt('Bitte manuell kopieren (Strg+C):', text);
        }
        document.body.removeChild(textarea);
    }

}

    // ========================================
    // FALLBACK-FUNKTIONALIT√ÑT (OHNE UNIFIED SYSTEM)
    // ========================================
    function initializeFahrplanportalFallback() {
        console.log('‚ö†Ô∏è FAHRPLANPORTAL: Initialisiere Fallback-Modus (ohne Unified System)');
        
        // Basis-Admin-Interface ohne AJAX-Funktionalit√§t
        $('#scan-directory').on('click', function() {
            $(this).prop('disabled', true);
            $('#scan-status').html('<span style="color: red;">‚ö†Ô∏è Unified AJAX System nicht verf√ºgbar - Seite neu laden</span>');
            
            setTimeout(function() {
                location.reload();
            }, 2000);
        });
        
        // Warnung f√ºr alle anderen AJAX-abh√§ngigen Buttons
        $('.button').not('#scan-directory').on('click', function(e) {
            if ($(this).attr('id') && ($(this).attr('id').indexOf('save') >= 0 || $(this).attr('id').indexOf('load') >= 0 || $(this).attr('id').indexOf('db') >= 0)) {
                e.preventDefault();
                alert('‚ö†Ô∏è Unified AJAX System nicht verf√ºgbar. Bitte Seite neu laden.');
            }
        });
        
        console.log('‚ö†Ô∏è FAHRPLANPORTAL: Fallback-Modus aktiv');
    }

    /**
     * ‚úÖ ZUS√ÑTZLICHE DEBUG-FUNKTION: System-Status pr√ºfen
     */
    function checkFahrplanSystemStatus() {
        console.log('üîç FAHRPLANPORTAL: System-Status Check');
        console.log('  - fahrplanportal_unified verf√ºgbar:', typeof fahrplanportal_unified !== 'undefined');
        console.log('  - UnifiedAjaxAPI verf√ºgbar:', typeof UnifiedAjaxAPI !== 'undefined');
        console.log('  - jQuery verf√ºgbar:', typeof jQuery !== 'undefined');
        
        if (typeof fahrplanportal_unified !== 'undefined') {
            console.log('  - AJAX URL:', fahrplanportal_unified.ajax_url);
            console.log('  - Nonce:', fahrplanportal_unified.nonce);
            console.log('  - Context:', fahrplanportal_unified.context);
        }
        
        if (typeof UnifiedAjaxAPI !== 'undefined') {
            console.log('  - UnifiedAjaxAPI.call verf√ºgbar:', typeof UnifiedAjaxAPI.call === 'function');
        }
    }
    
    // ‚úÖ Status beim Laden pr√ºfen
    setTimeout(function() {
        checkFahrplanSystemStatus();
    }, 1000);

});